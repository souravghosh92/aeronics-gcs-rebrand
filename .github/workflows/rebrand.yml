name: Rebrand QGroundControl to Aeronics GCS

on:
  workflow_dispatch:

jobs:
  rebrand:
    runs-on: ubuntu-latest

    env:
      RELEASE_TAG: base-apk            # <-- release tag that contains base.apk
      BASE_ASSET: base.apk             # <-- asset name in the release
      APP_NAME: "Aeronics GCS"         # <-- visible app name (launcher title)

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Ensure branding assets exist
        run: |
          set -e
          test -f custom/res/images/aeronics_icon.png || { echo "Missing custom/res/images/aeronics_icon.png"; exit 1; }
          # Optional, used for in‑app swaps if files are found:
          test -f custom/res/images/aeronics_logo.png && echo "aeronics_logo present" || true

      - name: Download base.apk from Release assets
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -e
          gh release download "$RELEASE_TAG" -p "$BASE_ASSET" -O base.apk
          test -f base.apk || { echo "base.apk not found in Release '$RELEASE_TAG' (asset: $BASE_ASSET)"; exit 1; }
          ls -lh base.apk

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Download apktool & Uber APK Signer
        run: |
          set -eux
          APKTOOL_VER=2.9.3
          curl -L -o apktool.jar https://github.com/iBotPeaches/Apktool/releases/download/v${APKTOOL_VER}/apktool_${APKTOOL_VER}.jar
          curl -L -o apktool https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/linux/apktool
          chmod +x apktool
          sudo mv apktool /usr/local/bin/
          mv apktool.jar /usr/local/bin/

          # Uber APK Signer
          UBER=v1.3.0
          curl -L -o uber-apk-signer.jar https://github.com/patrickfav/uber-apk-signer/releases/download/${UBER}/uber-apk-signer-${UBER}.jar

      - name: Decode base APK
        run: |
          set -eux
          apktool d -f -o decoded base.apk
          test -d decoded

      - name: Apply Aeronics launcher icon + point manifest to it
        run: |
          set -eux
          ICON="custom/res/images/aeronics_icon.png"

          # Place bitmap used by adaptive foreground
          mkdir -p decoded/res/drawable-nodpi
          cp "$ICON" decoded/res/drawable-nodpi/aeronics_icon.png

          # Adaptive icon XMLs (API 26+) that reference our bitmap
          mkdir -p decoded/res/mipmap-anydpi-v26
          cat > decoded/res/mipmap-anydpi-v26/ic_launcher.xml <<EOF
<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
  <background android:drawable="@android:color/white"/>
  <foreground>
    <bitmap android:src="@drawable/aeronics_icon" android:gravity="center"/>
  </foreground>
</adaptive-icon>
EOF
          cp decoded/res/mipmap-anydpi-v26/ic_launcher.xml decoded/res/mipmap-anydpi-v26/ic_launcher_round.xml

          # Make sure the manifest points to our new launcher icons
          sed -i 's/android:icon="[^"]*"/android:icon="@mipmap\/ic_launcher"/' decoded/AndroidManifest.xml || true
          sed -i 's/android:roundIcon="[^"]*"/android:roundIcon="@mipmap\/ic_launcher_round"/' decoded/AndroidManifest.xml || true

          # For pre‑26 devices, copy PNGs into common mipmap buckets if they exist;
          # we keep it minimal by using nodpi foreground – Android will fall back to adaptive where supported.
          for d in mdpi hdpi xhdpi xxhdpi xxxhdpi; do
            mkdir -p "decoded/res/mipmap-$d"
            cp "$ICON" "decoded/res/mipmap-$d/ic_launcher.png"
            cp "$ICON" "decoded/res/mipmap-$d/ic_launcher_round.png"
          done

      - name: Rename visible app name to Aeronics GCS
        run: |
          set -eux
          # 1) If app_name string exists, overwrite it
          if [ -f decoded/res/values/strings.xml ]; then
            sed -i 's#<string name="app_name">[^<]*</string>#<string name="app_name">'${APP_NAME//\//\\/}'</string>#' decoded/res/values/strings.xml || true
          fi
          # 2) Also harden by updating application android:label
          sed -i 's/android:label="[^"]*"/android:label="'${APP_NAME//\//\\/}'"/' decoded/AndroidManifest.xml || true

      - name: Optional – swap a few common in‑app Q icons if found
        run: |
          set -eux
          LOGO="custom/res/images/aeronics_logo.png"
          [ -f "$LOGO" ] || exit 0

          # Try to replace some likely QGC drawables, but only if they exist
          for f in qgc_logo qgcicon qgroundcontrol_logo app_logo ic_qgc_app ic_qgc_logo; do
            for dir in decoded/res/drawable*; do
              if [ -d "$dir" ] && compgen -G "$dir/$f.*" > /dev/null; then
                for hit in "$dir/$f."*; do
                  echo "Replacing $hit"
                  cp "$LOGO" "$hit"
                done
              fi
            done
          done

      - name: Rebuild APK (unsigned)
        run: |
          set -eux
          apktool b decoded -o unsigned.apk
          ls -lh unsigned.apk

      - name: Align & sign (Uber APK Signer)
        run: |
          set -eux
          rm -rf signed
          java -jar uber-apk-signer.jar --apks unsigned.apk --out signed
          ls -lh signed

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: Aeronics-GCS-APK
          path: signed/*.apk
          if-no-files-found: error
