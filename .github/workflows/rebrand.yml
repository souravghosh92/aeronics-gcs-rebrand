name: Build Aeronics GCS from QGroundControl source (Android)

on:
  workflow_dispatch:
    inputs:
      qgc_tag:
        description: "QGroundControl tag/commit to build"
        required: false
        type: string
        default: "v5.0.6"
      app_label:
        description: "Visible app name"
        required: false
        type: string
        default: "Aeronics GCS"

jobs:
  android:
    runs-on: ubuntu-22.04

    env:
      # ---- Versions known to work for QGC 5.0.x ----
      QT_VERSION: "6.5.3"
      ANDROID_NDK_VERSION: "25.2.9519653"
      ANDROID_API: "33"                # target/compile SDK
      CMAKE_BUILD_TYPE: "Release"

      # Branding files in THIS repository
      ICON_FILE: "custom/res/images/aeronics_icon.png"
      BRAND_LOGO: "custom/res/images/aeronics_logo.png"
      SPLASH_FILE: "custom/res/images/splash.png"

    steps:
      - name: Checkout branding repo (this)
        uses: actions/checkout@v4

      - name: Verify required branding files exist
        run: |
          test -f "$ICON_FILE"    || { echo "Missing $ICON_FILE"; exit 1; }
          test -f "$BRAND_LOGO"   || { echo "Missing $BRAND_LOGO"; exit 1; }
          test -f "qgc_custom.qrc" || { echo "Missing qgc_custom.qrc"; exit 1; }
          test -f "CustomPlugin.cc" || { echo "Missing CustomPlugin.cc"; exit 1; }

      - name: Install base packages
        run: |
          sudo apt-get update
          sudo apt-get install -y git ninja-build python3-pip unzip zip \
                                  openjdk-17-jdk jq imagemagick

      # ---- Install Qt for Android + host tools ----
      - name: Install Qt (host) & (android) with NDK
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ env.QT_VERSION }}
          host: linux
          target: "android"
          modules: "qtshadertools"
          archives: "android;wasm_32"
          setup-python: false
          tools: "tools_ifw,tools_qtcreator"
          cached: true

      - name: Setup Android SDK/NDK
        run: |
          echo "ANDROID_SDK_ROOT=$HOME/android-sdk" >> $GITHUB_ENV
          echo "ANDROID_HOME=$HOME/android-sdk" >> $GITHUB_ENV
          mkdir -p $HOME/android-sdk/cmdline-tools
          cd $HOME/android-sdk
          curl -sSL -o cmdline-tools.zip \
            https://dl.google.com/android/repository/commandlinetools-linux-10406996_latest.zip
          unzip -q cmdline-tools.zip -d cmdline-tools
          mv cmdline-tools/cmdline-tools cmdline-tools/latest
          rm -f cmdline-tools.zip
          echo "$HOME/android-sdk/cmdline-tools/latest/bin" >> $GITHUB_PATH
          yes | sdkmanager --licenses >/dev/null
          sdkmanager "platform-tools" "platforms;android-${{ env.ANDROID_API }}" "build-tools;34.0.0" "ndk;${{ env.ANDROID_NDK_VERSION }}"
          echo "ANDROID_NDK_ROOT=$HOME/android-sdk/ndk/${{ env.ANDROID_NDK_VERSION }}" >> $GITHUB_ENV
          echo "$HOME/android-sdk/platform-tools" >> $GITHUB_PATH
          echo "$HOME/android-sdk/build-tools/34.0.0" >> $GITHUB_PATH

      # ---- Get QGroundControl source ----
      - name: Clone QGroundControl
        run: |
          git clone --recursive https://github.com/mavlink/qgroundcontrol.git qgc
          cd qgc
          git checkout ${{ inputs.qgc_tag }}
          git submodule update --init --recursive

      # ---- Drop your custom folder into QGC and point CMake to it ----
      - name: Inject custom branding & plugin
        run: |
          set -eux
          # Copy your custom resources into QGC/custom
          mkdir -p qgc/custom
          cp -R custom qgc/
          cp qgc_custom.qrc qgc/custom/
          cp CustomPlugin.cc qgc/custom/

          # Ensure your QRC is referenced by a tiny CMake shim
          cat > qgc/custom/CMakeLists.txt <<'CMAKE'
          add_library(qgc_custom STATIC
            CustomPlugin.cc
          )
          target_include_directories(qgc_custom PRIVATE
            ${CMAKE_CURRENT_SOURCE_DIR}
          )
          # Add overridden resources (images, etc.)
          qt_add_resources(qgc_custom "custom_resources"
            PREFIX "/custom"
            FILES
              ${CMAKE_CURRENT_SOURCE_DIR}/res/images/aeronics_logo.png
              ${CMAKE_CURRENT_SOURCE_DIR}/res/images/aeronics_icon.png
              ${CMAKE_CURRENT_SOURCE_DIR}/res/images/splash.png
          )
          target_link_libraries(qgc_custom PRIVATE Qt::Core)
          set_property(TARGET qgc_custom PROPERTY POSITION_INDEPENDENT_CODE ON)
          set(QGC_CUSTOM_BUILD ON PARENT_SCOPE)
          set(QGC_CUSTOM_TARGET qgc_custom PARENT_SCOPE)
          CMAKE

          # Create a minimal header to register plugin (expected by QGC)
          cat > qgc/custom/CustomPlugin.h <<'HPP'
          #pragma once
          #include "QGCCorePlugin.h"
          class CustomPlugin : public QGCCorePlugin {
              Q_OBJECT
          public:
              explicit CustomPlugin(QGCApplication* app, QGCToolbox* toolbox) : QGCCorePlugin(app, toolbox) {}
          };
          HPP

          # If your CustomPlugin.cc is empty, ensure it includes that header:
          if ! grep -q "CustomPlugin.h" qgc/custom/CustomPlugin.cc; then
            sed -i '1i #include "CustomPlugin.h"' qgc/custom/CustomPlugin.cc
          fi

      # ---- Replace Android launcher resources + app label inside QGC android template ----
      - name: Apply Android launcher icon + app label
        run: |
          set -eux
          cd qgc/android

          # Put our icon into android res (vector/adaptive will be auto-generated as needed)
          mkdir -p res/mipmap-anydpi-v26 res/drawable-nodpi
          cp ../../${{ env.ICON_FILE }} res/drawable-nodpi/aeronics_icon.png

          # Adaptive icon xml -> points to bitmap
          cat > res/mipmap-anydpi-v26/ic_launcher.xml <<'XML'
          <?xml version="1.0" encoding="utf-8"?>
          <adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
            <background android:drawable="@android:color/transparent"/>
            <foreground>
              <bitmap android:src="@drawable/aeronics_icon" android:gravity="center"/>
            </foreground>
          </adaptive-icon>
          XML
          cp res/mipmap-anydpi-v26/ic_launcher.xml res/mipmap-anydpi-v26/ic_launcher_round.xml

          # Ensure manifest uses our resource names and our app label
          sed -i 's/android:icon="[^"]*"/android:icon="@mipmap\/ic_launcher"/' AndroidManifest.xml || true
          sed -i 's/android:roundIcon="[^"]*"/android:roundIcon="@mipmap\/ic_launcher_round"/' AndroidManifest.xml || true
          sed -i 's/android:label="[^"]*"/android:label="${{ inputs.app_label }}"/' AndroidManifest.xml || true

      # ---- Configure & build (CMake with Qt6 Android toolchain) ----
      - name: Configure (CMake)
        run: |
          set -eux
          cd qgc
          cmake -S . -B build-android -G Ninja \
            -DCMAKE_BUILD_TYPE=${{ env.CMAKE_BUILD_TYPE }} \
            -DANDROID=ON \
            -DANDROID_ABI=arm64-v8a \
            -DANDROID_PLATFORM=android-${{ env.ANDROID_API }} \
            -DQT_HOST_PATH="${{ env.Qt5_DIR:-$Qt6_DIR }}" \
            -DQT_ANDROID_SDK_ROOT="$ANDROID_SDK_ROOT" \
            -DQT_ANDROID_NDK_ROOT="$ANDROID_NDK_ROOT" \
            -DQGC_CUSTOM_BUILD=ON \
            -DQGC_CUSTOM_DIRECTORY="${{ github.workspace }}/qgc/custom"

      - name: Build
        run: |
          cmake --build qgc/build-android --parallel

      - name: Package APK
        run: |
          set -eux
          cd qgc/build-android
          # Qt's plugin generates an android deploy target:
          cmake --build . --target apk || true
          # Find produced APK
          APK=$(find . -type f -name "*.apk" | head -n1 || true)
          if [ -z "$APK" ]; then
            echo "APK not found; attempting gradle wrapper"
            cd ../android
            ./gradlew assembleRelease
            APK=$(find . -type f -name "*release*.apk" | head -n1)
          fi
          echo "APK=$APK" >> $GITHUB_ENV

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: Aeronics-GCS-from-source
          path: ${{ env.APK }}
          if-no-files-found: error
