name: Rebrand QGroundControl to Aeronics GCS (APK)

on:
  workflow_dispatch: {}

env:
  APP_NAME: "Aeronics GCS"
  # ðŸ‘‡ Change this to your release asset URL if you publish a new base APK
  BASE_APK_URL: "https://github.com/souravghosh92/aeronics-gcs-rebrand/releases/download/1.0/QGroundControl.2.apk"

jobs:
  rebrand:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Java (for apktool / signing)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Download apktool & uber-apk-signer
        run: |
          curl -L -o apktool.jar https://github.com/iBotPeaches/Apktool/releases/download/v2.9.3/apktool_2.9.3.jar
          curl -L -o apktool https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/linux/apktool
          chmod +x apktool
          curl -L -o uber-apk-signer.jar https://github.com/patrickfav/uber-apk-signer/releases/download/v1.3.0/uber-apk-signer-1.3.0.jar

      - name: Prepare branding files
        run: |
          set -e
          mkdir -p branding
          # If you uploaded images at repo root, copy them into branding/
          [ -f icon.png ] && cp -f icon.png branding/icon.png
          [ -f LogoLight.png ] && cp -f LogoLight.png branding/LogoLight.png
          [ -f LogoDark.png ] && cp -f LogoDark.png branding/LogoDark.png

          # Choose a general-purpose in-app logo file
          if [ -f branding/LogoDark.png ]; then
            cp -f branding/LogoDark.png branding/aeronics_logo.png
          elif [ -f branding/LogoLight.png ]; then
            cp -f branding/LogoLight.png branding/aeronics_logo.png
          elif [ -f branding/icon.png ]; then
            cp -f branding/icon.png branding/aeronics_logo.png
          else
            echo "âœ– No images found. Please add icon.png and/or LogoLight.png/LogoDark.png to the repo root."
            exit 1
          fi

      - name: Download base APK from your release
        run: |
          curl -L "$BASE_APK_URL" -o base.apk
          ls -lah base.apk

      - name: Decode APK (apktool d)
        run: |
          ./apktool d -f -o work base.apk
          test -d work || (echo "apktool decode failed" && exit 1)

      - name: Set app name in Manifest and values/strings
        run: |
          set -e
          # AndroidManifest label
          if grep -RIl --include="AndroidManifest.xml" 'android:label=' work >/dev/null 2>&1; then
            grep -RIl --include="AndroidManifest.xml" 'android:label=' work \
              | xargs -r sed -i 's/android:label="[^"]*"/android:label="'"$APP_NAME"'"/g'
          fi
          # app_name in all values*/strings.xml
          grep -RIl --include="strings.xml" '<string name="app_name">' work/res/values* 2>/dev/null \
            | xargs -r sed -i 's#<string name="app_name">[^<]*</string>#<string name="app_name">'"$APP_NAME"'</string>#g'
          # Any other "QGroundControl" strings in XML
          grep -RIl --include="*.xml" "QGroundControl" work/res/values* 2>/dev/null \
            | xargs -r sed -i 's/QGroundControl/'"$APP_NAME"'/g'
          # Version label string if present
          grep -RIl --include="*.xml" "QGroundControl Version" work 2>/dev/null \
            | xargs -r sed -i 's/QGroundControl Version/'"$APP_NAME"' Version/g'

      - name: Replace visible text in QML/JS
        run: |
          # Replace in-app literals
          grep -RIl --include="*.qml" --include="*.js" --include="*.json" "QGroundControl" work 2>/dev/null \
            | xargs -r sed -i 's/QGroundControl/'"$APP_NAME"'/g'

      - name: Replace launcher icons (mipmap/drawable)
        run: |
          set -e
          # Launcher icons
          for d in work/res/mipmap-*/; do
            [ -d "$d" ] || continue
            [ -f branding/icon.png ] && cp -f branding/icon.png "$d/ic_launcher.png" 2>/dev/null || true
            [ -f branding/icon.png ] && cp -f branding/icon.png "$d/ic_launcher_round.png" 2>/dev/null || true
          done
          # Foreground/background (if pngs exist)
          for d in work/res/drawable*/; do
            [ -d "$d" ] || continue
            [ -f branding/icon.png ] && cp -f branding/icon.png "$d/ic_launcher_foreground.png" 2>/dev/null || true
            [ -f branding/icon.png ] && cp -f branding/icon.png "$d/ic_launcher_background.png" 2>/dev/null || true
          done

      - name: Replace inâ€‘app logos (toolbar, settings, splash)
        run: |
          set -e
          # Common QGC logo names we see inside decoded APKs
          for n in \
            qgcLogo.png qgclogo.png QGCLogo.png qgcAppIcon.png productIcon.png \
            toolbarLogo.png appIcon.png AppIcon.png logo.png Logo.png \
            qgc_logo.png qgroundcontrol_logo.png; do
            find work -type f -iname "$n" -exec cp -f branding/aeronics_logo.png {} \; 2>/dev/null || true
          done
          # Any file named like *logo*.png or *qgc*.png as a last resort
          find work -type f -iregex '.*/\(logo\|qgc\)[^/]*\.\(png\|svg\)$' \
            -exec cp -f branding/aeronics_logo.png {} \; 2>/dev/null || true
          # Splash images
          find work -type f -iregex '.*/splash[^/]*\.png$' \
            -exec cp -f branding/icon.png {} \; 2>/dev/null || true
          find work -type f -iregex '.*/splash[^/]*\.9\.png$' \
            -exec cp -f branding/icon.png {} \; 2>/dev/null || true

      - name: Rebuild APK (apktool b)
        run: |
          ./apktool b work -o unsigned.apk
          ls -lah unsigned.apk

      - name: Sign & align (debug keystore via uber-apk-signer)
        run: |
          java -jar uber-apk-signer.jar --apks unsigned.apk
          # uber-apk-signer outputs *-aligned-debugSigned.apk; rename to friendly name
          NEWAPK="$(ls -1 *-aligned-debugSigned.apk | head -n1)"
          [ -f "$NEWAPK" ] || (echo "Signing failed"; exit 1)
          mv "$NEWAPK" "Aeronics-GCS.apk"
          ls -lah Aeronics-GCS.apk

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: Aeronics-GCS-APK
          path: Aeronics-GCS.apk
          if-no-files-found: error
