name: Rebrand Aeronics GCS

on:
  workflow_dispatch:

jobs:
  rebrand:
    runs-on: ubuntu-latest
    env:
      BASE_APK_URL: https://github.com/souravghosh92/aeronics-gcs-rebrand/releases/download/Base.apk/base.apk
      APP_NAME: Aeronics GCS
      ICON_PATH: branding/aeronics_icon_512.png

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup tools (apktool, ImageMagick, JDK, UberApkSigner)
        run: |
          set -e
          sudo apt-get update
          sudo apt-get install -y default-jdk imagemagick zipalign curl
          # apktool (jar + wrapper)
          sudo curl -L -o /usr/local/bin/apktool.jar https://bitbucket.org/iBotPeaches/apktool/downloads/apktool_2.9.3.jar
          echo 'exec java -jar /usr/local/bin/apktool.jar "$@"' | sudo tee /usr/local/bin/apktool >/dev/null
          sudo chmod +x /usr/local/bin/apktool
          # Uber APK Signer
          mkdir -p "$HOME/bin"
          curl -L -o "$HOME/bin/uber-apk-signer.jar" https://github.com/patrickfav/uber-apk-signer/releases/download/v1.3.0/uber-apk-signer-1.3.0.jar
          apktool --version

      - name: Download Base APK
        run: |
          set -e
          mkdir -p work
          cd work
          curl -L "$BASE_APK_URL" -o base.apk
          ls -lh base.apk

      - name: Decode APK
        run: |
          set -e
          cd work
          apktool d -f base.apk -o decoded
          test -d decoded

      - name: List possible logos
        run: |
          cd work/decoded
          echo "=== Searching for logo/splash/launcher files in APK ==="
          { find res -type f \( -iname "*ic_launcher*" -o -iname "*logo*.*" -o -iname "*qgc*.*" -o -iname "*qground*.*" -o -iname "*splash*.*" \) 2>/dev/null;
            find assets -type f \( -iname "*logo*.*" -o -iname "*qgc*.*" -o -iname "*qground*.*" -o -iname "*splash*.*" \) 2>/dev/null; } \
          | sort | tee "$GITHUB_WORKSPACE/image-map.txt"

      - name: Upload image map
        uses: actions/upload-artifact@v4
        with:
          name: image-map
          path: image-map.txt

      - name: Update manifest (app label + extractNativeLibs)
        run: |
          set -e
          cd work/decoded
          # Change visible app name
          if grep -q 'android:label=' AndroidManifest.xml; then
            sed -i 's#android:label="[^"]*"#android:label="'"$APP_NAME"'"#' AndroidManifest.xml
          else
            sed -i 's#<application #<application android:label="'"$APP_NAME"'" #' AndroidManifest.xml
          fi
          # Ensure native libs extracted
          if grep -q 'android:extractNativeLibs=' AndroidManifest.xml; then
            sed -i 's#android:extractNativeLibs="[^"]*"#android:extractNativeLibs="true"#' AndroidManifest.xml
          else
            sed -i 's#<application #<application android:extractNativeLibs="true" #' AndroidManifest.xml
          fi

      - name: Replace launcher icons (adaptive + round)
        run: |
          set -e
          cd work/decoded
          ICON="$GITHUB_WORKSPACE/$ICON_PATH"
          if [ ! -f "$ICON" ]; then
            echo "::error ::Missing $ICON_PATH (upload 512x512 PNG)"; exit 1
          fi
          # adaptive pieces
          mkdir -p res/drawable
          convert "$ICON" -resize 432x432 res/drawable/ic_launcher_foreground.png
          convert -size 108x108 xc:"#FFFFFF" res/drawable/ic_launcher_background.png
          # patch adaptive xmls if present
          if [ -d res/mipmap-anydpi-v26 ]; then
            for xml in $(find res/mipmap-anydpi-v26 -maxdepth 1 -name "ic_launcher*.xml" 2>/dev/null); do
              sed -i 's#@mipmap/ic_launcher_foreground#@drawable/ic_launcher_foreground#g' "$xml" || true
              sed -i 's#@mipmap/ic_launcher_background#@drawable/ic_launcher_background#g' "$xml" || true
              sed -i 's#@drawable-anydpi/ic_launcher_foreground#@drawable/ic_launcher_foreground#g' "$xml" || true
              sed -i 's#@drawable-anydpi/ic_launcher_background#@drawable/ic_launcher_background#g' "$xml" || true
              echo "Patched $xml"
            done
          fi
          # legacy pngs
          find res -type f \( -name "ic_launcher.png" -o -name "ic_launcher_round.png" \) | while read f; do
            sz=$(identify -format "%wx%h" "$f" 2>/dev/null || echo "192x192")
            echo "Overwriting $f with $sz"
            convert "$ICON" -resize "$sz" "$f"
          done

      - name: Apply overrides folder (res + assets)
        run: |
          set -e
          cd work/decoded
          SRC="$GITHUB_WORKSPACE/branding/overrides"
          if [ -d "$SRC" ]; then
            echo "Copying overrides from $SRC"
            find "$SRC" -type f -print0 | while IFS= read -r -d '' f; do
              rel="${f#"$SRC/"}"
              if [ -f "$rel" ]; then
                mkdir -p "$(dirname "$rel")"
                cp -f "$f" "$rel"
                echo "âœ” $rel"
              else
                echo "::warning ::Destination $rel not found in decoded APK; skipped"
              fi
            done
          fi

      - name: Apply in-app Aeronics logos (explicit copy)
        run: |
          set -e
          # Copy your assets explicitly (helps if the generic copy above skipped something)
          cp branding/overrides/assets/qml/images/about_logo.png           work/decoded/assets/qml/images/about_logo.png           || true
          cp branding/overrides/assets/qml/images/appbar_logo.png          work/decoded/assets/qml/images/appbar_logo.png          || true
          cp branding/overrides/assets/qml/images/qgc_logo_full.png        work/decoded/assets/qml/images/qgc_logo_full.png        || true
          cp branding/overrides/assets/qml/images/qgc_splash.png           work/decoded/assets/qml/images/qgc_splash.png           || true
          cp branding/overrides/assets/qml/images/qground_toolbar_logo.png work/decoded/assets/qml/images/qground_toolbar_logo.png || true
          cp branding/overrides/assets/qml/images/splash_logo.png          work/decoded/assets/qml/images/splash_logo.png          || true
          cp branding/overrides/assets/qml/images/title_logo.png           work/decoded/assets/qml/images/title_logo.png           || true

      - name: Normalize in-app asset sizes (safe defaults)
        run: |
          set -e
          cd work/decoded
          A="assets/qml/images"
          fit () {
            in="$1"; w="$2"; h="$3"
            if [ -f "$in" ]; then
              echo "Fitting $in to ${w}x${h}"
              convert "$in" -resize "${w}x${h}"^ -gravity center -background none -extent "${w}x${h}" "$in"
            fi
          }
          # toolbar/title/about (wide)
          fit "$A/qgc_logo_full.png"        300 80
          fit "$A/qground_toolbar_logo.png" 300 80
          fit "$A/title_logo.png"           300 80
          fit "$A/about_logo.png"           360 100
          fit "$A/appbar_logo.png"          360 100
          # splash
          fit "$A/splash_logo.png"         1024 1024
          fit "$A/qgc_splash.png"          1024 1024

      - name: Build APK
        run: |
          set -e
          cd work/decoded
          apktool b -f -o ../unsigned.apk
          ls -lh ../unsigned.apk

      - name: Sign & Align (Uber APK Signer)
        run: |
          set -e
          cd work
          java -jar "$HOME/bin/uber-apk-signer.jar" --apks unsigned.apk --out .
          out_apk=$(ls *-aligned-*-signed.apk | head -n 1 || true)
          if [ -z "$out_apk" ]; then
            out_apk=$(ls *-aligned-*.apk | head -n 1 || true)
          fi
          if [ -z "$out_apk" ]; then
            echo "::error ::Signing failed (no output APK)"; exit 1
          fi
          mv "$out_apk" Aeronics-GCS.apk
          ls -lh Aeronics-GCS.apk

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: Aeronics-GCS.apk
          path: work/Aeronics-GCS.apk
