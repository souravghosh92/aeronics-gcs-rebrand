name: Rebrand QGroundControl to Aeronics GCS

on:
  workflow_dispatch:
    inputs:
      APK_URL:
        description: "Direct download URL of base APK"
        default: "https://github.com/souravghosh92/aeronics-gcs-rebrand/releases/download/Base.apk/base.apk"
        required: true
      APP_NAME:
        description: "Visible app name"
        default: "Aeronics GCS"
        required: true
      ICON_PATH:
        description: "512x512 PNG for launcher (in repo)"
        default: "branding/aeronics_icon_512.png"
        required: true

jobs:
  rebrand:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup tools
        run: |
          set -e
          sudo apt-get update
          sudo apt-get install -y imagemagick default-jre wget unzip apt-transport-https ca-certificates
          # apktool
          wget -q https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/linux/apktool -O /tmp/apktool
          wget -q https://github.com/iBotPeaches/Apktool/releases/download/v2.9.3/apktool_2.9.3.jar -O /tmp/apktool.jar
          chmod +x /tmp/apktool
          sudo mv /tmp/apktool /usr/local/bin/apktool
          sudo mv /tmp/apktool.jar /usr/local/lib/apktool.jar
          echo 'alias apktool="java -jar /usr/local/lib/apktool.jar"' >> $GITHUB_ENV
          echo "JAVA_TOOL_OPTIONS=-Dfile.encoding=UTF-8" >> $GITHUB_ENV
          mkdir -p work

      - name: Verify apktool
        run: |
          java -jar /usr/local/lib/apktool.jar -version

      - name: Download Base APK
        run: |
          set -e
          curl -L "${{ github.event.inputs.APK_URL }}" -o work/base.apk
          ls -lh work/base.apk

      - name: Decode APK
        run: |
          set -e
          cd work
          java -jar /usr/local/lib/apktool.jar d -f base.apk -o decoded
          test -d decoded
          ls -la decoded | head -n 50

      - name: Update manifest (label + extractNativeLibs)
        env:
          APP_NAME: ${{ github.event.inputs.APP_NAME }}
        run: |
          set -e
          cd work/decoded
          if grep -q 'android:label=' AndroidManifest.xml; then
            sed -i 's#android:label="[^"]*"#android:label="'"$APP_NAME"'"#' AndroidManifest.xml
          else
            sed -i 's#<application #<application android:label="'"$APP_NAME"'" #' AndroidManifest.xml
          fi
          if grep -q 'android:extractNativeLibs=' AndroidManifest.xml; then
            sed -i 's#android:extractNativeLibs="[^"]*"#android:extractNativeLibs="true"#' AndroidManifest.xml
          else
            sed -i 's#<application #<application android:extractNativeLibs="true" #' AndroidManifest.xml
          fi

      - name: Replace launcher icons (generate our own mipmaps)
        env:
          ICON_PATH: ${{ github.event.inputs.ICON_PATH }}
        run: |
          set -e
          cd work/decoded
          SRC="$GITHUB_WORKSPACE/$ICON_PATH"
          if [ ! -f "$SRC" ]; then
            echo "::error ::Missing $ICON_PATH (512x512 PNG)"; exit 1
          fi
          for den in mdpi hdpi xhdpi xxhdpi xxxhdpi; do
            mkdir -p "res/mipmap-$den" "res/mipmap-$den-v4"
          done
          convert "$SRC" -resize 48x48   res/mipmap-mdpi/ic_aeronics.png
          convert "$SRC" -resize 72x72   res/mipmap-hdpi/ic_aeronics.png
          convert "$SRC" -resize 96x96   res/mipmap-xhdpi/ic_aeronics.png
          convert "$SRC" -resize 144x144 res/mipmap-xxhdpi/ic_aeronics.png
          convert "$SRC" -resize 192x192 res/mipmap-xxxhdpi/ic_aeronics.png
          for den in mdpi hdpi xhdpi xxhdpi xxxhdpi; do
            [ -d "res/mipmap-$den-v4" ] && cp "res/mipmap-$den/ic_aeronics.png" "res/mipmap-$den-v4/ic_aeronics.png" || true
          done

      - name: Force launcher + roundIcon in manifest
        run: |
          set -e
          cd work/decoded
          if grep -q 'android:icon=' AndroidManifest.xml; then
            sed -i 's#android:icon="[^"]*"#android:icon="@mipmap/ic_aeronics"#' AndroidManifest.xml
          else
            sed -i 's#<application #<application android:icon="@mipmap/ic_aeronics" #' AndroidManifest.xml
          fi
          if grep -q 'android:roundIcon=' AndroidManifest.xml; then
            sed -i 's#android:roundIcon="[^"]*"#android:roundIcon="@mipmap/ic_aeronics"#' AndroidManifest.xml
          else
            sed -i 's#<application #<application android:roundIcon="@mipmap/ic_aeronics" #' AndroidManifest.xml
          fi

      - name: Patch Android 12 splashscreen icon (if present)
        run: |
          set -e
          cd work/decoded
          if [ -f res/drawable/splashscreen.xml ]; then
            sed -i 's#@mipmap/[^"]*#@mipmap/ic_aeronics#g; s#@drawable/[^"]*#@mipmap/ic_aeronics#g' res/drawable/splashscreen.xml
            echo "Patched splashscreen.xml to use our mipmap icon"
          else
            echo "No splashscreen.xml found; skipping."
          fi

      # --- IN-APP IMAGES (QML) ---
      # Place your PNGs here in the repo:
      # branding/overrides/assets/qml/images/
      #   about_logo.png
      #   appbar_logo.png
      #   qgc_logo_full.png
      #   qgc_splash.png
      #   qground_toolbar_logo.png
      #   splash_logo.png
      #   title_logo.png
      - name: Overlay in-app images (QML assets)
        run: |
          set -e
          SRC_DIR="$GITHUB_WORKSPACE/branding/overrides/assets/qml/images"
          DST_DIR="work/decoded/assets/qml/images"
          mkdir -p "$DST_DIR"
          if [ -d "$SRC_DIR" ]; then
            rsync -av --no-perms --no-owner --no-group "$SRC_DIR/" "$DST_DIR/"
          else
            echo "No QML image overrides found at $SRC_DIR (skipping)."
          fi
          # Show what will be inside the APK
          ls -la "$DST_DIR" | sed -n '1,200p'

      - name: Apply res/ overrides (optional)
        run: |
          set -e
          if [ -d "branding/overrides/res" ]; then
            rsync -av --no-perms --no-owner --no-group "branding/overrides/res/" "work/decoded/res/"
          else
            echo "No res/ overrides present (skipping)."
          fi

      - name: Build APK
        run: |
          set -e
          cd work/decoded
          java -jar /usr/local/lib/apktool.jar b -f -o ../unsigned.apk
          ls -lh ../unsigned.apk

      - name: Sign & align APK (uber-apk-signer)
        run: |
          set -e
          cd work
          wget -q https://github.com/patrickfav/uber-apk-signer/releases/download/v1.3.0/uber-apk-signer-1.3.0.jar -O signer.jar
          java -jar signer.jar --apks unsigned.apk
          ls -lh unsigned-aligned-signed.apk
          mv unsigned-aligned-signed.apk Aeronics-GCS.apk

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: Aeronics-GCS
          path: work/Aeronics-GCS.apk
