name: Build Aeronics GCS from QGC source (auto-detect Qt5/Qt6)

on:
  workflow_dispatch:
    inputs:
      QGC_REPO:
        description: "QGroundControl repo to build"
        required: true
        default: "mavlink/qgroundcontrol"
      QGC_REF:
        description: "Branch/tag (e.g. v5.0.6 or master)"
        required: true
        default: "v5.0.6"
      APP_NAME:
        description: "Visible app name"
        required: true
        default: "Aeronics GCS"
      ICON_PATH:
        description: "512x512 PNG in your repo (launcher icon)"
        required: true
        default: "branding/aeronics_icon_512.png"
      INAPP_LOGO:
        description: "In-app logo PNG (transparent). If missing, ICON_PATH is used."
        required: false
        default: "branding/overrides/assets/qml/images/aeronics_logo.png"
      PACKAGE_ID:
        description: "(Optional) New package id, e.g. in.aeronics.gcs (leave blank to keep default)"
        required: false
        default: ""

jobs:
  android:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout branding repo (this repo)
        uses: actions/checkout@v4

      - name: Install build deps
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip git build-essential ninja-build ccache wget jq p7zip-full imagemagick

      # -------- FETCH QGC SOURCE FIRST (so we can detect Qt major) --------
      - name: Fetch QGroundControl source
        run: |
          set -e
          git clone --recursive https://github.com/${{ github.event.inputs.QGC_REPO }}.git qgc
          cd qgc
          git fetch --all --tags
          git checkout "${{ github.event.inputs.QGC_REF }}"
          git submodule update --init --recursive
          echo "Top CMakeLists snippet:"
          sed -n '1,220p' CMakeLists.txt | sed -n '160,200p'

      - name: Detect Qt major (5 or 6)
        id: detect
        run: |
          set -e
          if grep -q "find_package(Qt6" qgc/CMakeLists.txt; then
            echo "qt_major=6" >> $GITHUB_OUTPUT
            echo "QT_MAJOR=6" >> $GITHUB_ENV
            # Reasonable working versions for QGC with Qt6
            echo "QT_VERSION=6.5.3" >> $GITHUB_ENV
            echo "ANDROID_NDK_VERSION=25.2.9519653" >> $GITHUB_ENV
          else
            echo "qt_major=5" >> $GITHUB_OUTPUT
            echo "QT_MAJOR=5" >> $GITHUB_ENV
            echo "QT_VERSION=5.15.2" >> $GITHUB_ENV
            echo "ANDROID_NDK_VERSION=21.4.7075529" >> $GITHUB_ENV
          fi
          echo "Qt major selected: ${{ steps.detect.outputs.qt_major }}"

      # -------- ANDROID SDK / CMDLINE-TOOLS (uses detected NDK) ----------
      - name: Install Android SDK + cmdline-tools
        run: |
          set -e
          export ANDROID_SDK_ROOT="${{ github.workspace }}/android-sdk"
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
          cd "$ANDROID_SDK_ROOT"
          wget -q https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip -O cmdtools.zip
          unzip -q cmdtools.zip -d cmdline-tools-tmp
          rm -f cmdtools.zip
          mv cmdline-tools-tmp/cmdline-tools "$ANDROID_SDK_ROOT/cmdline-tools/latest"
          rm -rf cmdline-tools-tmp
          yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --licenses
          yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager \
            "platform-tools" "platforms;android-34" "build-tools;34.0.0" "ndk;${ANDROID_NDK_VERSION}"

      # -------- INSTALL QT (HOST TOOLS + ANDROID), CONDITIONALLY ----------
      - name: Install Qt host (desktop tools inc. androiddeployqt) - Qt6
        if: steps.detect.outputs.qt_major == '6'
        id: qt-host-6
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ env.QT_VERSION }}
          host: linux
          target: desktop
          arch: gcc_64

      - name: Install Qt for Android - Qt6
        if: steps.detect.outputs.qt_major == '6'
        id: qt-android-6
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ env.QT_VERSION }}
          host: linux
          target: android

      - name: Install Qt host (desktop tools inc. androiddeployqt) - Qt5
        if: steps.detect.outputs.qt_major == '5'
        id: qt-host-5
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ env.QT_VERSION }}
          host: linux
          target: desktop
          arch: gcc_64

      - name: Install Qt for Android - Qt5
        if: steps.detect.outputs.qt_major == '5'
        id: qt-android-5
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ env.QT_VERSION }}
          host: linux
          target: android

      # -------- APPLY BRANDING ----------
      - name: Apply Aeronics branding to source
        run: |
          set -e
          APPNAME="${{ github.event.inputs.APP_NAME }}"
          INAPP="${{ github.event.inputs.INAPP_LOGO }}"
          ICON="${{ github.event.inputs.ICON_PATH }}"
          [ -f "$ICON" ] || { echo "::error ::ICON_PATH not found: $ICON"; exit 1; }
          if [ ! -f "$INAPP" ]; then INAPP="$ICON"; fi

          # 1) Manifest: label + optional package id
          sed -i 's/android:label="[^"]*"/android:label="@string\/app_name"/' qgc/android/AndroidManifest.xml || true
          if [ -n "${{ github.event.inputs.PACKAGE_ID }}" ]; then
            sed -i 's/package="\([^"]*\)"/package="${{ github.event.inputs.PACKAGE_ID }}"/' qgc/android/AndroidManifest.xml || true
          fi
          mkdir -p qgc/resources/strings
          cat > qgc/resources/strings/strings_aeronics.xml <<EOF
          <resources>
            <string name="app_name">${APPNAME}</string>
          </resources>
          EOF

          # 2) In-app icons
          mkdir -p qgc/resources/icons
          cp "$INAPP" qgc/resources/icons/aeronics_logo.png
          for f in qgc_logo_full.png qground_toolbar_logo.png qgc_splash.png appbar_logo.png about_logo.png title_logo.png; do
            if [ -f "qgc/resources/icons/$f" ]; then
              cp "$INAPP" "qgc/resources/icons/$f"
            fi
          done

          # 3) Launcher mipmaps
          mkdir -p qgc/android/res/mipmap-{mdpi,hdpi,xhdpi,xxhdpi,xxxhdpi}
          convert "$ICON" -resize 48x48   qgc/android/res/mipmap-mdpi/ic_launcher.png
          convert "$ICON" -resize 72x72   qgc/android/res/mipmap-hdpi/ic_launcher.png
          convert "$ICON" -resize 96x96   qgc/android/res/mipmap-xhdpi/ic_launcher.png
          convert "$ICON" -resize 144x144 qgc/android/res/mipmap-xxhdpi/ic_launcher.png
          convert "$ICON" -resize 192x192 qgc/android/res/mipmap-xxxhdpi/ic_launcher.png
          for d in mdpi hdpi xhdpi xxhdpi xxxhdpi; do
            cp qgc/android/res/mipmap-$d/ic_launcher.png qgc/android/res/mipmap-$d/ic_launcher_round.png
          done

          # 4) Replace brand text in QML
          grep -RIl --null -e 'QGroundControl' qgc | xargs -0 -r sed -i "s/QGroundControl/${APPNAME}/g"

      # -------- CONFIGURE & BUILD (separate blocks for Qt6 / Qt5) ----------
      - name: Configure & Build (Qt6)
        if: steps.detect.outputs.qt_major == '6'
        env:
          ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}
          ANDROID_NDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}/ndk/${{ env.ANDROID_NDK_VERSION }}
          QT_ANDROID_DIR: ${{ steps.qt-android-6.outputs.QT_INSTALL_DIR }}
          QT_HOST_DIR: ${{ steps.qt-host-6.outputs.QT_INSTALL_DIR }}
        run: |
          set -e
          mkdir -p build-android && cd build-android
          cmake ../qgc -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DANDROID_ABI=arm64-v8a \
            -DANDROID_PLATFORM=android-24 \
            -DQt6_DIR=${QT_ANDROID_DIR}/lib/cmake/Qt6 \
            -DQT_HOST_PATH=${QT_HOST_DIR} \
            -DQT_ANDROID_SDK_ROOT=${ANDROID_SDK_ROOT} \
            -DQT_ANDROID_NDK_ROOT=${ANDROID_NDK_ROOT}
          ninja

      - name: Configure & Build (Qt5)
        if: steps.detect.outputs.qt_major == '5'
        env:
          ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}
          ANDROID_NDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}/ndk/${{ env.ANDROID_NDK_VERSION }}
          QT_ANDROID_DIR: ${{ steps.qt-android-5.outputs.QT_INSTALL_DIR }}
          QT_HOST_DIR: ${{ steps.qt-host-5.outputs.QT_INSTALL_DIR }}
        run: |
          set -e
          mkdir -p build-android && cd build-android
          cmake ../qgc -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DANDROID_ABI=arm64-v8a \
            -DANDROID_PLATFORM=android-24 \
            -DQt5_DIR=${QT_ANDROID_DIR}/lib/cmake/Qt5 \
            -DQT_QMAKE_EXECUTABLE=${QT_ANDROID_DIR}/bin/qmake \
            -DQt5Core_DIR=${QT_ANDROID_DIR}/lib/cmake/Qt5Core \
            -DQt5Gui_DIR=${QT_ANDROID_DIR}/lib/cmake/Qt5Gui \
            -DQt5Qml_DIR=${QT_ANDROID_DIR}/lib/cmake/Qt5Qml \
            -DQt5Quick_DIR=${QT_ANDROID_DIR}/lib/cmake/Qt5Quick \
            -DQt5Widgets_DIR=${QT_ANDROID_DIR}/lib/cmake/Qt5Widgets \
            -DQT_HOST_PATH=${QT_HOST_DIR} \
            -DQT_ANDROID_SDK_ROOT=${ANDROID_SDK_ROOT} \
            -DQT_ANDROID_NDK_ROOT=${ANDROID_NDK_ROOT}
          ninja

      # -------- PACKAGE ----------
      - name: Package APK (androiddeployqt)
        env:
          PATH: ${{ steps.qt-host-6.outputs.QT_INSTALL_DIR }}/bin:${{ steps.qt-host-5.outputs.QT_INSTALL_DIR }}/bin:${{ env.PATH }}
        run: |
          set -e
          cd build-android
          APP_JSON=$(find . -name "*-android_deployment_settings.json" | head -n1)
          [ -n "$APP_JSON" ] || { echo "::error ::android_deployment_settings.json not found"; exit 1; }
          androiddeployqt --input "$APP_JSON" --output ./android-build --deployment bundled --gradle --release
          find . -name "*.apk" -type f -print

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: Aeronics-GCS-from-source
          path: "**/*.apk"
