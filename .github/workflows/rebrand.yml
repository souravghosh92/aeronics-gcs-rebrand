name: Rebrand QGroundControl APK

on:
  workflow_dispatch:
    inputs:
      base_url:
        description: "Direct download URL of base APK (e.g. your GitHub release link)"
        required: true
        type: string
      app_name:
        description: "Visible app name"
        required: false
        default: "Aeronics GCS"
        type: string

env:
  ICON_PATH: branding/aeronics_icon_512.png

jobs:
  rebrand:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup tools (apktool, ImageMagick, uber-apk-signer)
        run: |
          set -e
          sudo apt-get update
          sudo apt-get install -y imagemagick curl
          mkdir -p tools
          # apktool jar + wrapper
          curl -L -o tools/apktool.jar https://github.com/iBotPeaches/Apktool/releases/download/v2.9.3/apktool_2.9.3.jar
          sudo cp tools/apktool.jar /usr/local/bin/apktool.jar
          sudo curl -L -o /usr/local/bin/apktool https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/linux/apktool
          sudo chmod +x /usr/local/bin/apktool
          # uber-apk-signer
          curl -L -o tools/uber-apk-signer.jar https://github.com/patrickfav/uber-apk-signer/releases/download/v1.3.0/uber-apk-signer-1.3.0.jar

      - name: Download Base APK
        run: |
          set -e
          mkdir -p work
          cd work
          curl -L "${{ inputs.base_url }}" -o base.apk
          ls -lh base.apk

      - name: Decode APK
        run: |
          set -e
          cd work
          apktool d -f base.apk -o decoded
          test -d decoded

      - name: List possible logos (for debugging)
        run: |
          set -e
          cd work/decoded
          {
            find res -type f \( -iname "*ic_launcher*.png" -o -iname "*logo*.png" -o -iname "*splash*.png" \) 2>/dev/null
            find assets -type f \( -iname "*logo*.png" -o -iname "*splash*.png" \) 2>/dev/null
            find . -path "./lib" -prune -o -type f -name "*.qml" -print | xargs -I{} grep -Hn "logo\|splash\|qgc" {} || true
          } | sort | tee "$GITHUB_WORKSPACE/image-map.txt"

      - name: Upload image map
        uses: actions/upload-artifact@v4
        with:
          name: image-map
          path: image-map.txt

      - name: Update manifest (app label + extractNativeLibs)
        env:
          APP_NAME: ${{ inputs.app_name }}
        run: |
          set -e
          cd work/decoded
          # Visible app name
          if grep -q 'android:label=' AndroidManifest.xml; then
            sed -i 's#android:label="[^"]*"#android:label="'"$APP_NAME"'"#' AndroidManifest.xml
          else
            sed -i 's#<application #<application android:label="'"$APP_NAME"'" #' AndroidManifest.xml
          fi
          # Ensure native libs are extracted (prevents some runtime crashes)
          if grep -q 'android:extractNativeLibs=' AndroidManifest.xml; then
            sed -i 's#android:extractNativeLibs="[^"]*"#android:extractNativeLibs="true"#' AndroidManifest.xml
          else
            sed -i 's#<application #<application android:extractNativeLibs="true" #' AndroidManifest.xml
          fi

      - name: Replace launcher icons (generate our own mipmaps)
        run: |
          set -e
          cd work/decoded
          SRC="$GITHUB_WORKSPACE/${ICON_PATH}"
          if [ ! -f "$SRC" ]; then
            echo "::error ::Missing ${ICON_PATH} (512x512 PNG)"; exit 1
          fi
          for den in mdpi hdpi xhdpi xxhdpi xxxhdpi; do
            mkdir -p "res/mipmap-$den" "res/mipmap-$den-v4"
          done
          convert "$SRC" -resize 48x48   res/mipmap-mdpi/ic_aeronics.png
          convert "$SRC" -resize 72x72   res/mipmap-hdpi/ic_aeronics.png
          convert "$SRC" -resize 96x96   res/mipmap-xhdpi/ic_aeronics.png
          convert "$SRC" -resize 144x144 res/mipmap-xxhdpi/ic_aeronics.png
          convert "$SRC" -resize 192x192 res/mipmap-xxxhdpi/ic_aeronics.png
          for den in mdpi hdpi xhdpi xxhdpi xxxhdpi; do
            [ -d "res/mipmap-$den-v4" ] && cp "res/mipmap-$den/ic_aeronics.png" "res/mipmap-$den-v4/ic_aeronics.png" || true
          done

      - name: Force launcher + roundIcon in manifest
        run: |
          set -e
          cd work/decoded
          if grep -q 'android:icon=' AndroidManifest.xml; then
            sed -i 's#android:icon="[^"]*"#android:icon="@mipmap/ic_aeronics"#' AndroidManifest.xml
          else
            sed -i 's#<application #<application android:icon="@mipmap/ic_aeronics" #' AndroidManifest.xml
          fi
          if grep -q 'android:roundIcon=' AndroidManifest.xml; then
            sed -i 's#android:roundIcon="[^"]*"#android:roundIcon="@mipmap/ic_aeronics"#' AndroidManifest.xml
          else
            sed -i 's#<application #<application android:roundIcon="@mipmap/ic_aeronics" #' AndroidManifest.xml
          fi

      - name: Patch Android 12 splashscreen icon (if present)
        run: |
          set -e
          cd work/decoded
          if [ -f res/drawable/splashscreen.xml ]; then
            sed -i 's#@mipmap/[^"]*#@mipmap/ic_aeronics#g; s#@drawable/[^"]*#@mipmap/ic_aeronics#g' res/drawable/splashscreen.xml || true
          fi

      # ---- In-app image overrides ----
      # Put your PNGs in: branding/overrides/assets/qml/images and branding/overrides/res/...
      - name: Apply overrides (assets & res)
        run: |
          set -e
          cd work/decoded
          # Copy 'assets' replacements (e.g. qml/images/*.png)
          if [ -d "$GITHUB_WORKSPACE/branding/overrides/assets" ]; then
            mkdir -p assets
            rsync -a "$GITHUB_WORKSPACE/branding/overrides/assets/" assets/
          fi
          # Copy 'res' replacements (drawable-*, mipmap-*, xml, etc.)
          if [ -d "$GITHUB_WORKSPACE/branding/overrides/res" ]; then
            rsync -a "$GITHUB_WORKSPACE/branding/overrides/res/" res/
          fi

      - name: Patch QML to use our in-app images (best effort)
        run: |
          set -e
          cd work/decoded
          # Replace common QGC image references if they exist
          find assets -type f -name "*.qml" -print0 2>/dev/null | while IFS= read -r -d '' q; do
            sed -i \
              -e 's#qgc_logo_full\.png#qgc_logo_full.png#g' \
              -e 's#qground_toolbar_logo\.png#qground_toolbar_logo.png#g' \
              -e 's#title_logo\.png#title_logo.png#g' \
              -e 's#splash_logo\.png#splash_logo.png#g' \
              -e 's#about_logo\.png#about_logo.png#g' \
              "$q" || true
          done

      - name: Build APK
        run: |
          set -e
          cd work/decoded
          apktool b -f -o ../unsigned.apk
          cd ..
          ls -lh unsigned.apk

      - name: Sign & align APK
        run: |
          set -e
          cd work
          java -jar ../tools/uber-apk-signer.jar --overwrite --allowResign -a unsigned.apk
          SIGNED=$(ls *-signed.apk | head -n1 || true)
          if [ -z "$SIGNED" ] || [ ! -f "$SIGNED" ]; then
            echo "::error ::No signed APK produced"; exit 1
          fi
          mv "$SIGNED" Aeronics-GCS.apk
          ls -lh Aeronics-GCS.apk

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: Aeronics-GCS.apk
          path: work/Aeronics-GCS.apk
