name: Rebrand Aeronics GCS (from repo release)

on:
  workflow_dispatch:
    inputs:
      APP_NAME:
        description: "Visible app name"
        default: "Aeronics GCS"

jobs:
  rebrand:
    runs-on: ubuntu-latest
    env:
      APP_NAME: ${{ github.event.inputs.APP_NAME }}
      ICON: branding/aeronics_icon_512.png

    steps:
      - uses: actions/checkout@v4

      - name: Download base.apk from this repo's release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          mkdir -p work && cd work
          gh release download "Base.apk" --repo "$GITHUB_REPOSITORY" --pattern "base.apk" --clobber
          test -f base.apk || { echo "::error ::No base.apk found in release tag Base.apk"; exit 1; }
          mv base.apk qgc.apk
          ls -lh qgc.apk

      - name: Setup tools
        run: |
          sudo apt-get update
          sudo apt-get install -y default-jre zipalign apksigner imagemagick curl
          mkdir -p $HOME/bin
          curl -L -o $HOME/bin/apktool.jar https://github.com/iBotPeaches/Apktool/releases/download/v2.9.3/apktool_2.9.3.jar
          printf '#!/usr/bin/env bash\nexec java -jar $HOME/bin/apktool.jar "$@"\n' > $HOME/bin/apktool
          chmod +x $HOME/bin/apktool
          echo "$HOME/bin" >> $GITHUB_PATH
      - name: Verify apktool
        run: apktool --version

      - name: Decode APK
        run: cd work && apktool d -f -o decoded qgc.apk

      - name: Set manifest label + ensure native libs extraction
        run: |
          cd work/decoded
          if grep -q 'android:label=' AndroidManifest.xml; then
            sed -i 's#android:label="[^"]*"#android:label="'"$APP_NAME"'"#' AndroidManifest.xml
          else
            sed -i 's#<application #<application android:label="'"$APP_NAME"'" #' AndroidManifest.xml
          fi
          if grep -q 'android:extractNativeLibs=' AndroidManifest.xml; then
            sed -i 's#android:extractNativeLibs="[^"]*"#android:extractNativeLibs="true"#' AndroidManifest.xml
          else
            sed -i 's#<application #<application android:extractNativeLibs="true" #' AndroidManifest.xml
          fi

      - name: Replace launcher icons (overwrite existing only)
        run: |
          cd work/decoded
          if [ ! -f "$GITHUB_WORKSPACE/$ICON" ]; then
            echo "::error ::Missing branding/aeronics_icon_512.png (upload 512x512 PNG)"; exit 1
          fi
          mapfile -t files < <(find res -type f -name "ic_launcher*.png" | sort)
          for f in "${files[@]}"; do
            sz=$(identify -format "%wx%h" "$f" 2>/dev/null || echo "192x192")
            echo "Overwriting $f with $sz"
            convert "$GITHUB_WORKSPACE/$ICON" -resize "$sz" "$f"
          done

      - name: Apply overrides (optional)
        run: |
          cd work/decoded
          SRC="$GITHUB_WORKSPACE/branding/overrides"
          if [ -d "$SRC" ]; then
            echo "Applying overrides from $SRC"
            while IFS= read -r -d '' f; do
              rel="${f#"$SRC/"}"
              if [ -f "$rel" ]; then
                cp -f "$f" "$rel"
                echo "Override applied: $rel"
              fi
            done < <(find "$SRC" -type f -print0)
          fi

      - name: Build
        run: |
          cd work
          apktool b decoded -o Aeronics-GCS-unsigned.apk

      - name: Align, sign, verify
        run: |
          cd work
          zipalign -f 4 Aeronics-GCS-unsigned.apk Aeronics-GCS-aligned.apk
          keytool -genkey -v -keystore debug.keystore -storepass android \
            -alias androiddebugkey -keypass android -keyalg RSA -keysize 2048 -validity 10000 \
            -dname "CN=Aeronics,O=Aeronics"
          apksigner sign --ks debug.keystore --ks-pass pass:android \
            --key-pass pass:android --out Aeronics-GCS.apk Aeronics-GCS-aligned.apk
          apksigner verify Aeronics-GCS.apk

      - uses: actions/upload-artifact@v4
        with:
          name: Aeronics-GCS-APK
          path: work/Aeronics-GCS.apk
