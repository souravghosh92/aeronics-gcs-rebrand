name: Rebrand QGroundControl to Aeronics GCS (APK)

on:
  workflow_dispatch:

permissions:
  contents: read

env:
  # ⬇️ Put your APK download URL here (a public or your repo's release asset URL)
  BASE_APK_URL: "https://github.com/souravghosh92/aeronics-gcs-rebrand/releases/download/1.0/QGroundControl.2.apk"

  # File names for your images stored in repo under custom/res/images/
  ICON_FILE: "custom/res/images/aeronics_icon.png"
  LOGO_FILE: "custom/res/images/aeronics_logo.png"
  SPLASH_FILE: "custom/res/images/splash.png"

  # New branding text
  NEW_APP_NAME: "Aeronics GCS"

jobs:
  rebrand:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Ensure images exist
        run: |
          set -e
          for f in "$ICON_FILE" "$LOGO_FILE"; do
            if [ ! -s "$f" ]; then
              echo "❌ Missing required image: $f"
              exit 1
            fi
          done
          echo "✅ Branding images found."

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Install tools (apktool, signer, imagemagick, aapt)
        run: |
          set -eux
          sudo apt-get update
          sudo apt-get install -y imagemagick aapt zipalign
          curl -L -o apktool.jar https://github.com/iBotPeaches/Apktool/releases/download/v2.9.3/apktool_2.9.3.jar
          curl -L -o apktool https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/linux/apktool
          chmod +x apktool
          curl -L -o uber-apk-signer.jar https://github.com/patrickfav/uber-apk-signer/releases/download/v1.3.0/uber-apk-signer-1.3.0.jar

      - name: Download base APK
        run: |
          set -eux
          curl -L "$BASE_APK_URL" -o base.apk
          echo "Downloaded APK:"
          ls -lh base.apk
          aapt dump badging base.apk | head -n 20 || true

      - name: Decode APK
        run: |
          set -eux
          java -jar apktool.jar d -f -o decoded-apk base.apk

      - name: DEBUG — list decoded contents
        run: |
          echo "=== Top-level in decoded-apk ==="
          (cd decoded-apk && find . -maxdepth 2 -type d | sort)
          echo "=== Look for strings mentioning QGroundControl or QGC ==="
          grep -R --line-number -E "QGroundControl|QGC" decoded-apk/res || true
          echo "=== Common res folders present ==="
          (cd decoded-apk/res && ls -1 | sort)

      - name: Replace app name in strings
        run: |
          set -eux
          # Replace in all values XMLs (some APKs split strings across locales)
          for f in decoded-apk/res/values*/strings*.xml; do
            [ -f "$f" ] || continue
            sed -i "s/>QGroundControl</>${NEW_APP_NAME}</g" "$f" || true
            sed -i "s/>Q Ground Control</>${NEW_APP_NAME}</g" "$f" || true
            sed -i "s/>QGC</>${NEW_APP_NAME}</g" "$f" || true
          done
          echo "✅ Strings replacement attempted."

      - name: Replace launcher icons (mipmap densities)
        run: |
          set -eux
          # Try common Android launcher names
          for d in decoded-apk/res/mipmap-*; do
            [ -d "$d" ] || continue
            for n in ic_launcher.png ic_launcher_round.png ic_launcher_foreground.png; do
              if [ -f "$d/$n" ]; then
                echo "Replacing $d/$n"
                cp "$ICON_FILE" "$d/$n" || true
              fi
            done
          done
          echo "✅ Launcher icon replacement attempted."

      - name: Replace in-app logos (common qgc/logo names)
        run: |
          set -eux
          # Replace any images that look like qgc / logo / brand in drawable*/mipmap*/raw*/assets
          # We will copy our logo into those names if they exist.
          find decoded-apk/res -type f \( -name "*qgc*.png" -o -name "*logo*.png" -o -name "*brand*.png" \) -print0 | while IFS= read -r -d '' p; do
            echo "Replacing $p"
            cp "$LOGO_FILE" "$p" || true
          done

          # A few very common specific names (if present)
          for p in \
            decoded-apk/res/drawable*/qgc_logo.png \
            decoded-apk/res/drawable*/qgc_logo_foreground.png \
            decoded-apk/res/drawable*/logo_qgc.png \
            decoded-apk/res/drawable*/splash.png \
            decoded-apk/res/mipmap*/qgc_logo.png \
            decoded-apk/res/drawable*/ic_qgc.png \
          ; do
            [ -f "$p" ] && cp "$LOGO_FILE" "$p" || true
          done
          # Optional splash replacement
          if [ -s "$SPLASH_FILE" ]; then
            for p in decoded-apk/res/drawable*/splash.png; do
              [ -f "$p" ] && cp "$SPLASH_FILE" "$p" || true
            done
          fi
          echo "✅ In-app logo replacement attempted."

      - name: DEBUG — verify replacements
        run: |
          echo "=== Check any remaining Q* strings in res ==="
          grep -R --line-number -E "QGroundControl|QGC" decoded-apk/res || echo "No 'QGroundControl'/'QGC' strings found in res."
          echo "=== Show a few icon files that now exist ==="
          find decoded-apk/res -type f -name "ic_launcher*.png" | head -n 20
          echo "=== Show a few *logo*.png files ==="
          find decoded-apk/res -type f -name "*logo*.png" | head -n 20

      - name: Rebuild APK (unsigned)
        run: |
          set -eux
          java -jar apktool.jar b -o unsigned.apk decoded-apk
          ls -lh unsigned.apk

      - name: Align (zipalign) and Sign APK
        run: |
          set -eux
          # First align
          zipalign -p -f 4 unsigned.apk unsigned-aligned.apk || cp unsigned.apk unsigned-aligned.apk
          # Then sign with a default test key (built-in to uber-apk-signer)
          java -jar uber-apk-signer.jar --allowResign -a unsigned-aligned.apk --out signed
          ls -lh signed

      - name: Pack diagnosis (for troubleshooting if needed)
        run: |
          set -eux
          mkdir -p diag
          (cd decoded-apk && (find . -maxdepth 2 -type d | sort) > ../diag/tree.txt)
          (grep -R --line-number -E "QGroundControl|QGC" decoded-apk/res || true) > diag/grep_strings.txt
          (find decoded-apk/res -type f -name "*logo*.png" | sort) > diag/logos_found.txt
          (find decoded-apk/res -type f -name "ic_launcher*.png" | sort) >> diag/logos_found.txt
          zip -r diagnosis.zip diag

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: Aeronics-GCS-APK
          path: |
            signed/*.apk

      - name: Upload diagnosis artifact
        uses: actions/upload-artifact@v4
        with:
          name: diagnosis
          path: |
            diagnosis.zip
