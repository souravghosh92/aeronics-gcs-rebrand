name: Rebrand QGroundControl to Aeronics GCS (from Release)

on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  rebrand:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install tools (Java, ImageMagick, jq)
        run: |
          sudo apt-get update
          sudo apt-get install -y openjdk-17-jre-headless imagemagick jq curl unzip

      - name: Download apktool + uber-apk-signer
        run: |
          curl -sL -o apktool.jar https://github.com/iBotPeaches/Apktool/releases/download/v2.9.3/apktool_2.9.3.jar
          echo '#!/usr/bin/env bash' > apktool
          echo 'exec java -jar "$PWD/apktool.jar" "$@"' >> apktool
          chmod +x apktool
          curl -sL -o uber-apk-signer.jar https://github.com/patrickfav/uber-apk-signer/releases/download/v1.3.0/uber-apk-signer-1.3.0.jar

      - name: Fetch base.apk from latest Release
        env:
          GH_REPO: ${{ github.repository }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          API="https://api.github.com/repos/${GH_REPO}/releases/latest"
          ASSET_ID=$(curl -s -H "Authorization: Bearer ${GITHUB_TOKEN}" "$API" \
            | jq -r '.assets[] | select(.name=="base.apk") | .id')
          if [ -z "${ASSET_ID:-}" ] || [ "${ASSET_ID}" = "null" ]; then
            echo "❌ No asset named base.apk on the latest release. Create a release and attach your original APK as base.apk."
            exit 1
          fi
          curl -L -H "Authorization: Bearer ${GITHUB_TOKEN}" \
               -H "Accept: application/octet-stream" \
               "https://api.github.com/repos/${GH_REPO}/releases/assets/${ASSET_ID}" \
               -o base.apk
          ls -lh base.apk

      - name: Verify branding images exist
        run: |
          set -e
          test -s custom/res/images/aeronics_icon.png  || (echo "Missing custom/res/images/aeronics_icon.png" && exit 1)
          test -s custom/res/images/aeronics_logo.png  || (echo "Missing custom/res/images/aeronics_logo.png" && exit 1)
          [ -s custom/res/images/splash.png ] || echo "Note: splash.png not provided (optional)."

      - name: Decode APK
        run: |
          ./apktool d -f -o decoded base.apk
          ls -la decoded | sed -n '1,120p'

      - name: Apply Aeronics branding (name, icons, in-app logos)
        run: |
          set -euxo pipefail

          ICON="custom/res/images/aeronics_icon.png"
          LOGO="custom/res/images/aeronics_logo.png"
          SPLASH="custom/res/images/splash.png"
          NEW_NAME="Aeronics GCS"

          # 1) App name: strings + Manifest literal fallback
          for f in $(find decoded/res -type f -name "strings.xml"); do
            sed -i "s/>QGroundControl</>${NEW_NAME}</g" "$f" || true
            sed -i "s/>Q Ground Control</>${NEW_NAME}</g" "$f" || true
            sed -i "s/>QGC</>${NEW_NAME}</g" "$f" || true
          done
          sed -i 's/android:label="[^"]*"/android:label="Aeronics GCS"/' decoded/AndroidManifest.xml || true
          sed -i "s/android:label='[^']*'/android:label='Aeronics GCS'/" decoded/AndroidManifest.xml || true

          # 2) Force Manifest to use standard launcher icons
          sed -i 's/android:icon="[^"]*"/android:icon="@mipmap\/ic_launcher"/' decoded/AndroidManifest.xml || true
          sed -i 's/android:roundIcon="[^"]*"/android:roundIcon="@mipmap\/ic_launcher_round"/' decoded/AndroidManifest.xml || true

          # 3) Adaptive icon XML → point to our bitmap
          mkdir -p decoded/res/mipmap-anydpi-v26 decoded/res/drawable-nodpi
          cp "$ICON" decoded/res/drawable-nodpi/aeronics_icon.png
          cat > decoded/res/mipmap-anydpi-v26/ic_launcher.xml <<'XML'
<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
  <background android:drawable="@android:color/transparent"/>
  <foreground>
    <bitmap android:src="@drawable/aeronics_icon" android:gravity="center"/>
  </foreground>
</adaptive-icon>
XML
          cp decoded/res/mipmap-anydpi-v26/ic_launcher.xml decoded/res/mipmap-anydpi-v26/ic_launcher_round.xml

          # 4) Legacy mipmap bitmaps (many launchers still read these)
          mkdir -p decoded/res/mipmap-mdpi decoded/res/mipmap-hdpi decoded/res/mipmap-xhdpi decoded/res/mipmap-xxhdpi decoded/res/mipmap-xxxhdpi
          convert "$ICON" -resize 48x48   decoded/res/mipmap-mdpi/ic_launcher.png
          convert "$ICON" -resize 72x72   decoded/res/mipmap-hdpi/ic_launcher.png
          convert "$ICON" -resize 96x96   decoded/res/mipmap-xhdpi/ic_launcher.png
          convert "$ICON" -resize 144x144 decoded/res/mipmap-xxhdpi/ic_launcher.png
          convert "$ICON" -resize 192x192 decoded/res/mipmap-xxxhdpi/ic_launcher.png
          cp decoded/res/mipmap-mdpi/ic_launcher.png   decoded/res/mipmap-mdpi/ic_launcher_round.png
          cp decoded/res/mipmap-hdpi/ic_launcher.png   decoded/res/mipmap-hdpi/ic_launcher_round.png
          cp decoded/res/mipmap-xhdpi/ic_launcher.png  decoded/res/mipmap-xhdpi/ic_launcher_round.png
          cp decoded/res/mipmap-xxhdpi/ic_launcher.png decoded/res/mipmap-xxhdpi/ic_launcher_round.png
          cp decoded/res/mipmap-xxxhdpi/ic_launcher.png decoded/res/mipmap-xxxhdpi/ic_launcher_round.png

          # 5) Replace in‑app logos (PNG/SVG) in res/ and assets/
          find decoded -type f -iregex '.*\/\(res\|assets\)\/.*\(qgc\|qground\|logo\|brand\|about\).*\.\(png\|svg\)$' -print0 \
            | while IFS= read -r -d '' p; do
                echo "Replacing $p"
                cp "$LOGO" "$p" || true
              done

          # 6) Optional: splash artwork
          if [ -f "$SPLASH" ]; then
            find decoded -type f -iregex '.*\/\(res\|assets\)\/.*splash.*\.png$' -print0 \
              | while IFS= read -r -d '' p; do
                  echo "Replacing splash $p"
                  cp "$SPLASH" "$p" || true
                done
          fi

          # 7) Text inside QML/JS/JSON/TXT/XML under assets (UI labels)
          if [ -d decoded/assets ]; then
            find decoded/assets -type f -iregex '.*\.\(qml\|js\|json\|txt\|xml\|ini\)$' -print0 \
              | xargs -0 -I{} sed -i "s/QGroundControl/${NEW_NAME}/g" "{}" || true
            find decoded/assets -type f -iregex '.*\.\(qml\|js\|json\|txt\|xml\|ini\)$' -print0 \
              | xargs -0 -I{} sed -i "s/\bQGC\b/${NEW_NAME}/g" "{}" || true
          fi

      - name: Diagnostics (remaining Q references)
        run: |
          mkdir -p diag
          (grep -RniE "QGroundControl|\\bQGC\\b" decoded || true) > diag/remaining_strings.txt
          (cd decoded && find res assets -type f -iregex '.*\(qgc\|qground\|logo\|brand\).*\.\(png\|svg\)' | sort) > diag/images_touched.txt

      - name: Build with AAPT2 (more stable)
        run: |
          ./apktool b --use-aapt2 -o unsigned.apk decoded
          ls -lh unsigned.apk

      - name: Sign & align (uber-apk-signer)
        run: |
          java -jar uber-apk-signer.jar -a unsigned.apk -o out --allowResign
          ls -la out
          mv out/unsigned-aligned-signed.apk Aeronics-GCS.apk
          ls -lh Aeronics-GCS.apk

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: Aeronics-GCS-APK
          path: Aeronics-GCS.apk

      - name: Upload diagnosis
        uses: actions/upload-artifact@v4
        with:
          name: diagnosis
          path: diag
