name: Rebrand QGroundControl to Aeronics GCS

on:
  workflow_dispatch:
    inputs:
      base_apk_url:
        description: "Direct download URL of the base APK"
        required: true
        default: "https://github.com/souravghosh92/aeronics-gcs-rebrand/releases/download/Base.apk/base.apk"
      app_name:
        description: "Visible app name"
        required: true
        default: "Aeronics GCS"
      icon_path:
        description: "Path (in repo) to 512x512 launcher icon PNG"
        required: true
        default: "branding/aeronics_icon_512.png"

jobs:
  rebrand:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup tools (apktool, ImageMagick, signer)
        run: |
          set -euxo pipefail
          sudo apt-get update
          sudo apt-get install -y default-jre unzip imagemagick curl
          # Install apktool (jar + wrapper)
          APKTOOL_VER=2.9.3
          sudo curl -L -o /usr/local/bin/apktool.jar "https://github.com/iBotPeaches/Apktool/releases/download/v${APKTOOL_VER}/apktool_${APKTOOL_VER}.jar"
          echo '#!/usr/bin/env bash' | sudo tee /usr/local/bin/apktool >/dev/null
          echo 'exec java -jar /usr/local/bin/apktool.jar "$@"' | sudo tee -a /usr/local/bin/apktool >/dev/null
          sudo chmod +x /usr/local/bin/apktool
          apktool -version
          # uber-apk-signer
          UBER_VER=1.3.0
          curl -L -o uber-apk-signer.jar "https://github.com/patrickfav/uber-apk-signer/releases/download/v${UBER_VER}/uber-apk-signer-${UBER_VER}.jar"
          mkdir -p work

      - name: Download Base APK
        run: |
          set -e
          cd work
          curl -fL "${{ inputs.base_apk_url }}" -o base.apk
          ls -lh base.apk

      - name: Decode APK
        run: |
          set -e
          cd work
          apktool d -f base.apk -o decoded
          test -d decoded

      - name: Update manifest (app label + extractNativeLibs)
        run: |
          set -e
          cd work/decoded
          # Change visible app name
          if grep -q 'android:label=' AndroidManifest.xml; then
            sed -i 's#android:label="[^"]*"#android:label="'"${{ inputs.app_name }}"'"#' AndroidManifest.xml
          else
            sed -i 's#<application #<application android:label="'"${{ inputs.app_name }}"'" #' AndroidManifest.xml
          fi
          # Ensure native libs extracted (avoids startup crashes on some devices)
          if grep -q 'android:extractNativeLibs=' AndroidManifest.xml; then
            sed -i 's#android:extractNativeLibs="[^"]*"#android:extractNativeLibs="true"#' AndroidManifest.xml
          else
            sed -i 's#<application #<application android:extractNativeLibs="true" #' AndroidManifest.xml
          fi

      - name: Replace launcher icons (generate our own mipmaps)
        run: |
          set -e
          cd work/decoded
          SRC="$GITHUB_WORKSPACE/${{ inputs.icon_path }}"
          if [ ! -f "$SRC" ]; then
            echo "::error ::Missing $SRC (512x512 PNG)"; exit 1
          fi
          # Make mipmap folders if they don't exist
          for den in mdpi hdpi xhdpi xxhdpi xxxhdpi; do
            mkdir -p "res/mipmap-$den" "res/mipmap-$den-v4"
          done
          # Generate mipmap icons named ic_aeronics.png
          convert "$SRC" -resize 48x48   res/mipmap-mdpi/ic_aeronics.png
          convert "$SRC" -resize 72x72   res/mipmap-hdpi/ic_aeronics.png
          convert "$SRC" -resize 96x96   res/mipmap-xhdpi/ic_aeronics.png
          convert "$SRC" -resize 144x144 res/mipmap-xxhdpi/ic_aeronics.png
          convert "$SRC" -resize 192x192 res/mipmap-xxxhdpi/ic_aeronics.png
          # Also duplicate into -v4 folders if present
          for den in mdpi hdpi xhdpi xxhdpi xxxhdpi; do
            [ -d "res/mipmap-$den-v4" ] && cp "res/mipmap-$den/ic_aeronics.png" "res/mipmap-$den-v4/ic_aeronics.png" || true
          done

      - name: Force launcher + roundIcon in manifest
        run: |
          set -e
          cd work/decoded
          # Ensure android:icon and android:roundIcon point to our mipmap
          if grep -q 'android:icon=' AndroidManifest.xml; then
            sed -i 's#android:icon="[^"]*"#android:icon="@mipmap/ic_aeronics"#' AndroidManifest.xml
          else
            sed -i 's#<application #<application android:icon="@mipmap/ic_aeronics" #' AndroidManifest.xml
          fi
          if grep -q 'android:roundIcon=' AndroidManifest.xml; then
            sed -i 's#android:roundIcon="[^"]*"#android:roundIcon="@mipmap/ic_aeronics"#' AndroidManifest.xml
          else
            sed -i 's#<application #<application android:roundIcon="@mipmap/ic_aeronics" #' AndroidManifest.xml
          fi

      - name: Patch Android 12 splashscreen icon (if present)
        run: |
          set -e
          cd work/decoded
          if [ -f res/drawable/splashscreen.xml ]; then
            sed -i 's#@mipmap/[^"]*#@mipmap/ic_aeronics#g; s#@drawable/[^"]*#@mipmap/ic_aeronics#g' res/drawable/splashscreen.xml
            echo "Patched res/drawable/splashscreen.xml"
          else
            echo "No res/drawable/splashscreen.xml to patch."
          fi

      - name: Apply overrides (assets & res)
        run: |
          set -e
          cd work/decoded
          # Copy any resource overrides
          if [ -d "$GITHUB_WORKSPACE/branding/overrides/res" ]; then
            rsync -a "$GITHUB_WORKSPACE/branding/overrides/res/" "res/"
          fi
          # Copy any assets (e.g., QML images)
          if [ -d "$GITHUB_WORKSPACE/branding/overrides/assets" ]; then
            rsync -a "$GITHUB_WORKSPACE/branding/overrides/assets/" "assets/"
          fi

      - name: Patch QML to use our in-app images
        run: |
          set -e
          cd work/decoded
          # Replace known QGC image references inside QML with our branded images
          patch_one() {
            local orig="$1"
            local repl="branding/overrides/assets/qml/images/$1"
            # If a branded file with that name exists, patch references
            if [ -f "$GITHUB_WORKSPACE/$repl" ]; then
              for f in $(grep -ril "$orig" assets/qml || true); do
                echo "Patching $f: $orig -> $repl"
                sed -i "s#$orig#$repl#g" "$f"
              done
            else
              echo "Note: $repl not found; skip replacing $orig"
            fi
          }
          patch_one qgc_logo_full.png
          patch_one title_logo.png
          patch_one splash_logo.png
          patch_one about_logo.png
          patch_one appbar_logo.png

      - name: Build APK
        run: |
          set -e
          cd work/decoded
          apktool b -f -o ../unsigned.apk
          ls -lh ../unsigned.apk

      - name: Sign & align APK
        run: |
          set -e
          cd work
          java -jar ../uber-apk-signer.jar --overwrite --allowResign -a unsigned.apk
          ls -lh unsigned-aligned-signed.apk || true
          # Fall back to auto-detected output name if needed
          SIGNED=$(ls *-aligned-signed.apk | head -n1)
          mv "$SIGNED" Aeronics-GCS.apk

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: Aeronics-GCS.apk
          path: work/Aeronics-GCS.apk
