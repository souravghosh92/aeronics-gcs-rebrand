name: Rebrand QGroundControl to Aeronics GCS

on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  rebrand:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # ---------- prerequisites ----------
      - name: Install Java + ImageMagick + zipalign deps
        run: |
          sudo apt-get update
          sudo apt-get install -y default-jdk imagemagick jq

      - name: Install Android SDK build-tools (zipalign + apksigner)
        env:
          ANDROID_SDK_ROOT: ${{ runner.temp }}/android-sdk
        run: |
          set -eux
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
          cd "$ANDROID_SDK_ROOT"
          curl -sL -o tools.zip https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip
          unzip -q tools.zip -d cmdline-tools
          mv cmdline-tools/cmdline-tools cmdline-tools/latest
          yes | cmdline-tools/latest/bin/sdkmanager --sdk_root="$ANDROID_SDK_ROOT" "build-tools;34.0.0" > /dev/null
          echo "BUILD_TOOLS=$ANDROID_SDK_ROOT/build-tools/34.0.0" >> $GITHUB_ENV

      - name: Download apktool
        run: |
          set -eux
          curl -sL -o apktool.jar https://bitbucket.org/iBotPeaches/apktool/downloads/apktool_2.9.3.jar
          echo 'java -jar /usr/local/bin/apktool.jar "$@"' | sudo tee /usr/local/bin/apktool >/dev/null
          sudo mv apktool.jar /usr/local/bin/
          sudo chmod +x /usr/local/bin/apktool

      # ---------- inputs present? ----------
      - name: Check required assets exist
        run: |
          set -eux
          test -f branding/base.apk || (echo "Missing branding/base.apk" && exit 1)
          test -f custom/res/images/aeronics_icon.png || (echo "Missing custom/res/images/aeronics_icon.png" && exit 1)
          test -f custom/res/images/aeronics_logo.png || (echo "Missing custom/res/images/aeronics_logo.png" && exit 1)
          # splash optional
          if [ ! -f custom/res/images/splash.png ]; then
            echo "NOTE: custom/res/images/splash.png not found (that's OK)."
          fi

      # ---------- decode ----------
      - name: Decode base APK
        run: |
          set -eux
          rm -rf work dist
          mkdir -p work dist
          cp branding/base.apk base.apk
          apktool d -f -o work base.apk

      # ---------- apply branding ----------
      - name: Replace launcher + menu icons with Aeronics ones
        run: |
          set -eux
          ICON=custom/res/images/aeronics_icon.png
          LOGO=custom/res/images/aeronics_logo.png

          # helper to write into every density folder that exists
          write_icon () {
            local src="$1"; shift
            for d in work/res/mipmap-*/ work/res/drawable-*/ work/res/drawable*/ ; do
              [ -d "$d" ] || continue
              for name in ic_launcher.png ic_launcher_round.png ic_launcher_foreground.png ic_launcher_adaptive_fore.png app_icon.png qgc_app_icon.png qgc_icon.png ; do
                if [ -f "$d/$name" ]; then
                  echo "Replacing $d/$name"
                  convert "$src" -resize 192x192\> "$d/$name"
                fi
              done
            done
          }

          # launcher icons → Aeronics icon
          write_icon "$ICON"

          # in‑app logos (menu/top-left/about, etc.) → Aeronics logo
          for f in $(git -C work ls-files | grep -E '^res/.*/.*(qgc|qground|logo|about).*\.png$' || true); do
            echo "Replacing work/$f"
            convert "$LOGO" -resize 512x512\> "work/$f"
          done

          # generic pass: if any PNG contains a purple Q logo name, overwrite with Aeronics logo
          for f in $(find work/res -type f -name '*.png' | grep -iE 'logo|about|qgc|qground'); do
            echo "Replacing $f"
            convert "$LOGO" -resize 512x512\> "$f"
          done

          # Optional splash
          if [ -f custom/res/images/splash.png ]; then
            for f in $(find work/res -type f -name '*splash*.png'); do
              echo "Replacing splash $f"
              convert custom/res/images/splash.png -resize 1080x1920\> "$f"
            done
          fi

      - name: Rename visible app name to Aeronics GCS
        run: |
          set -eux
          # 1) values/strings.xml entries
          find work/res -type f -name "strings.xml" -print0 | xargs -0 sed -i 's/QGroundControl/Aeronics GCS/g'
          # 2) Any other xml or json resource text occurrences
          find work -type f \( -name "*.xml" -o -name "*.json" -o -name "*.txt" \) -print0 | xargs -0 sed -i 's/QGroundControl/Aeronics GCS/g'
          # 3) As a fallback, also scan smali (word-boundary to avoid touching package names)
          find work/smali* -type f -name "*.smali" -print0 | xargs -0 sed -i 's/\bQGroundControl\b/Aeronics GCS/g' || true

      # ---------- rebuild/sign ----------
      - name: Rebuild APK
        run: |
          set -eux
          apktool b work -o dist/aeronics-unsigned.apk

      - name: Zipalign
        run: |
          set -eux
          "${BUILD_TOOLS}/zipalign" -f -p 4 dist/aeronics-unsigned.apk dist/aeronics-aligned.apk

      - name: Make debug keystore (if missing)
        run: |
          set -eux
          if [ ! -f debug.keystore ]; then
            keytool -genkey -noprompt -alias androiddebugkey -dname "CN=Android,O=Android,C=US" -keystore debug.keystore -storepass android -keypass android -keyalg RSA -keysize 2048 -validity 10000
          fi

      - name: Sign APK
        run: |
          set -eux
          "${BUILD_TOOLS}/apksigner" sign --ks debug.keystore --ks-pass pass:android --key-pass pass:android --out dist/Aeronics-GCS.apk dist/aeronics-aligned.apk
          "${BUILD_TOOLS}/apksigner" verify --print-certs dist/Aeronics-GCS.apk

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: Aeronics-GCS-APK
          path: dist/Aeronics-GCS.apk
          if-no-files-found: error
