name: Rebrand Aeronics GCS
on:
  workflow_dispatch:

jobs:
  rebrand:
    runs-on: ubuntu-latest
    env:
      # Your base QGC APK
      BASE_APK_URL: https://github.com/souravghosh92/aeronics-gcs-rebrand/releases/download/Base.apk/base.apk
      # Visible app name
      APP_NAME: Aeronics GCS
      # 512x512 PNG you added to the repo
      ICON_PATH: branding/aeronics_icon_512.png

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup tools (apktool, ImageMagick, JDK, signer)
        run: |
          set -e
          sudo apt-get update
          sudo apt-get install -y default-jdk imagemagick zipalign curl
          # apktool (jar + wrapper)
          sudo curl -L -o /usr/local/bin/apktool.jar https://bitbucket.org/iBotPeaches/apktool/downloads/apktool_2.9.3.jar
          echo 'exec java -jar /usr/local/bin/apktool.jar "$@"' | sudo tee /usr/local/bin/apktool >/dev/null
          sudo chmod +x /usr/local/bin/apktool
          # Uber APK Signer
          mkdir -p "$HOME/bin"
          curl -L -o "$HOME/bin/uber-apk-signer.jar" https://github.com/patrickfav/uber-apk-signer/releases/download/v1.3.0/uber-apk-signer-1.3.0.jar
          apktool --version

      - name: Download Base APK
        run: |
          set -e
          mkdir -p work
          cd work
          curl -L "$BASE_APK_URL" -o base.apk
          ls -lh base.apk

      - name: Decode APK
        run: |
          set -e
          cd work
          apktool d -f base.apk -o decoded
          test -d decoded

      - name: Update manifest (app label + extractNativeLibs)
        run: |
          set -e
          cd work/decoded
          # Visible app name
          if grep -q 'android:label=' AndroidManifest.xml; then
            sed -i 's#android:label="[^"]*"#android:label="'"$APP_NAME"'"#' AndroidManifest.xml
          else
            sed -i 's#<application #<application android:label="'"$APP_NAME"'" #' AndroidManifest.xml
          fi
          # Ensure native libs extracted
          if grep -q 'android:extractNativeLibs=' AndroidManifest.xml; then
            sed -i 's#android:extractNativeLibs="[^"]*"#android:extractNativeLibs="true"#' AndroidManifest.xml
          else
            sed -i 's#<application #<application android:extractNativeLibs="true" #' AndroidManifest.xml
          fi

      - name: Replace launcher icons (generate our own mipmaps)
        run: |
          set -e
          cd work/decoded
          SRC="$GITHUB_WORKSPACE/branding/aeronics_icon_512.png"
          if [ ! -f "$SRC" ]; then
            echo "::error ::Missing branding/aeronics_icon_512.png (512x512 PNG)"; exit 1
          fi
          # Make mipmap folders if they don't exist
          for den in mdpi hdpi xhdpi xxhdpi xxxhdpi; do
            mkdir -p "res/mipmap-$den" "res/mipmap-$den-v4"
          done
          # Generate mipmap icons named ic_aeronics.png
          convert "$SRC" -resize 48x48   res/mipmap-mdpi/ic_aeronics.png
          convert "$SRC" -resize 72x72   res/mipmap-hdpi/ic_aeronics.png
          convert "$SRC" -resize 96x96   res/mipmap-xhdpi/ic_aeronics.png
          convert "$SRC" -resize 144x144 res/mipmap-xxhdpi/ic_aeronics.png
          convert "$SRC" -resize 192x192 res/mipmap-xxxhdpi/ic_aeronics.png
          # Also duplicate into -v4 folders if present
          for den in mdpi hdpi xhdpi xxhdpi xxxhdpi; do
            [ -d "res/mipmap-$den-v4" ] && cp "res/mipmap-$den/ic_aeronics.png" "res/mipmap-$den-v4/ic_aeronics.png" || true
          done

      - name: Force launcher + roundIcon in manifest
        run: |
          set -e
          cd work/decoded
          # Make sure <application ... android:icon= and roundIcon= point to our mipmap
          if grep -q 'android:icon=' AndroidManifest.xml; then
            sed -i 's#android:icon="[^"]*"#android:icon="@mipmap/ic_aeronics"#' AndroidManifest.xml
          else
            sed -i 's#<application #<application android:icon="@mipmap/ic_aeronics" #' AndroidManifest.xml
          fi
          if grep -q 'android:roundIcon=' AndroidManifest.xml; then
            sed -i 's#android:roundIcon="[^"]*"#android:roundIcon="@mipmap/ic_aeronics"#' AndroidManifest.xml
          else
            sed -i 's#<application #<application android:roundIcon="@mipmap/ic_aeronics" #' AndroidManifest.xml
          fi

      - name: Patch Android 12 splashscreen icon
        run: |
          set -e
          cd work/decoded
          if [ -f res/drawable/splashscreen.xml ]; then
            # Replace any reference inside splashscreen.xml to our new mipmap icon
            sed -i 's#@mipmap/[^"]*#@mipmap/ic_aeronics#g; s#@drawable/[^"]*#@mipmap/ic_aeronics#g' res/drawable/splashscreen.xml
            echo "Patched res/drawable/splashscreen.xml to use @mipmap/ic_aeronics"
          else
            echo "Note: res/drawable/splashscreen.xml not found to patch (nothing to do)."
          fi

      - name: Build APK
        run: |
          set -e
          cd work/decoded
          apktool b -f -o ../unsigned.apk
          ls -lh ../unsigned.apk

      - name: Sign & Align
        run: |
          set -e
          cd work
          java -jar "$HOME/bin/uber-apk-signer.jar" --apks unsigned.apk --out .
          out_apk=$(ls *-aligned-*-signed.apk | head -n 1 || true)
          if [ -z "$out_apk" ]; then
            out_apk=$(ls *-aligned-*.apk | head -n 1 || true)
          fi
          if [ -z "$out_apk" ]; then
            echo "::error ::Signing failed (no output APK)"; exit 1
          fi
          mv "$out_apk" Aeronics-GCS.apk
          ls -lh Aeronics-GCS.apk

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: Aeronics-GCS.apk
          path: work/Aeronics-GCS.apk
