name: Rebrand QGC/Mission Planner APK to Aeronics GCS (full)

on:
  workflow_dispatch:
    inputs:
      APK_URL:
        description: "Direct download URL of base APK"
        required: true
        default: "https://github.com/souravghosh92/aeronics-gcs-rebrand/releases/download/Base.apk/base.apk"
      APP_NAME:
        description: "Visible in-app name"
        required: true
        default: "Aeronics GCS"
      ICON_PATH:
        description: "Path to 512x512 PNG inside repo (launcher icon source)"
        required: true
        default: "branding/aeronics_icon_512.png"
      INAPP_LOGO:
        description: "(Optional) In-app Aeronics logo PNG. If missing, ICON_PATH is used."
        required: false
        default: "branding/overrides/assets/qml/images/aeronics_logo.png"
      PACKAGE_ID:
        description: "(Optional) New package id, e.g. in.aeronics.gcs (keep blank to keep original)"
        required: false
        default: ""

jobs:
  rebrand:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install tools
        run: |
          set -e
          sudo apt-get update
          sudo apt-get install -y openjdk-17-jre-headless wget unzip rsync imagemagick jq
          sudo curl -L -o /usr/local/bin/apktool https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/linux/apktool
          sudo chmod +x /usr/local/bin/apktool
          sudo curl -L -o /usr/local/lib/apktool.jar https://github.com/iBotPeaches/Apktool/releases/download/v2.9.3/apktool_2.9.3.jar

      - name: Download base APK
        run: |
          set -e
          mkdir -p work
          cd work
          echo "Downloading: ${{ github.event.inputs.APK_URL }}"
          wget -O base.apk "${{ github.event.inputs.APK_URL }}"
          ls -lh base.apk

      - name: Decode APK
        run: |
          set -e
          cd work
          java -jar /usr/local/lib/apktool.jar d -f -o decoded base.apk
          ls -la decoded | sed -n '1,120p'

      # ---------- Launcher icon ----------
      - name: Generate launcher mipmaps from 512x512
        run: |
          set -e
          ICON="${{ github.event.inputs.ICON_PATH }}"
          test -f "$ICON" || { echo "::error ::Icon not found at $ICON"; exit 1; }
          mkdir -p work/decoded/res/mipmap-{mdpi,hdpi,xhdpi,xxhdpi,xxxhdpi}
          convert "$ICON" -resize 48x48   work/decoded/res/mipmap-mdpi/ic_launcher.png
          convert "$ICON" -resize 72x72   work/decoded/res/mipmap-hdpi/ic_launcher.png
          convert "$ICON" -resize 96x96   work/decoded/res/mipmap-xhdpi/ic_launcher.png
          convert "$ICON" -resize 144x144 work/decoded/res/mipmap-xxhdpi/ic_launcher.png
          convert "$ICON" -resize 192x192 work/decoded/res/mipmap-xxxhdpi/ic_launcher.png
          for d in mdpi hdpi xhdpi xxhdpi xxxhdpi; do
            cp work/decoded/res/mipmap-$d/ic_launcher.png work/decoded/res/mipmap-$d/ic_launcher_round.png
          done
          sed -i 's/android:icon="[^"]*"/android:icon="@mipmap\/ic_launcher"/' work/decoded/AndroidManifest.xml || true
          sed -i 's/android:roundIcon="[^"]*"/android:roundIcon="@mipmap\/ic_launcher_round"/' work/decoded/AndroidManifest.xml || true

      # ---------- App name + texts ----------
      - name: Patch in-app name (strings + manifest + assets text)
        run: |
          set -e
          APPNAME="${{ github.event.inputs.APP_NAME }}"
          # make manifest read from @string/app_name
          sed -i 's/android:label="[^"]*"/android:label="@string\/app_name"/' work/decoded/AndroidManifest.xml || true
          # optional new package id
          if [ -n "${{ github.event.inputs.PACKAGE_ID }}" ]; then
            sed -i 's/package="\([^"]*\)"/package="${{ github.event.inputs.PACKAGE_ID }}"/' work/decoded/AndroidManifest.xml || true
          fi
          # add our strings
          mkdir -p work/decoded/res/values
          cat > work/decoded/res/values/strings_aeronics.xml <<EOF
          <resources>
            <string name="app_name">${APPNAME}</string>
            <string name="brand_name">Aeronics</string>
            <string name="app_full_name">${APPNAME}</string>
          </resources>
          EOF
          # replace plain text mentions inside assets
          if [ -d work/decoded/assets ]; then
            grep -RIl --null -e 'QGroundControl' work/decoded/assets | xargs -0 -r sed -i "s/QGroundControl/${APPNAME}/g"
            grep -RIl --null -e 'Mission Planner' work/decoded/assets | xargs -0 -r sed -i "s/Mission Planner/${APPNAME}/g"
          fi
          # normalize any android:title="..."
          find work/decoded/res -type f -name '*.xml' -print0 | xargs -0 -r sed -i 's/android:title="[^"]*"/android:title="@string\/app_name"/g'

      # ---------- In-app logos (assets/qml/images) ----------
      - name: Replace QGC logos inside assets/qml/images
        run: |
          set -e
          INAPP="${{ github.event.inputs.INAPP_LOGO }}"
          if [ ! -f "$INAPP" ]; then INAPP="${{ github.event.inputs.ICON_PATH }}"; fi
          test -f "$INAPP" || { echo "::error ::No Aeronics logo found (INAPP_LOGO/ICON_PATH)"; exit 1; }
          IMG_DIR="work/decoded/assets/qml/images"
          mkdir -p "$IMG_DIR"
          cp "$INAPP" "$IMG_DIR/aeronics_logo.png"
          # overwrite common names
          for f in qground_toolbar_logo.png qgc_logo_full.png appbar_logo.png title_logo.png splash_logo.png about_logo.png qgc_splash.png; do
            if [ -f "$IMG_DIR/$f" ]; then cp "$IMG_DIR/aeronics_logo.png" "$IMG_DIR/$f"; fi
          done
          # rewrite QML references
          if [ -d work/decoded/assets/qml ]; then
            grep -RIl --null -e 'qground_.*logo\|qgc_.*logo\|appbar_logo\.png\|title_logo\.png\|splash_logo\.png\|about_logo\.png\|qgc_splash\.png' work/decoded/assets/qml \
            | xargs -0 -r sed -i 's/[A-Za-z0-9_]*logo\.png/aeronics_logo.png/g; s/qgc_splash\.png/aeronics_logo.png/g'
          fi

      # ---------- ANDROID RES drawables (THIS fixes the two purple Q icons) ----------
      - name: Replace Android drawable refs to Aeronics icon
        run: |
          set -e
          INAPP="${{ github.event.inputs.INAPP_LOGO }}"
          if [ ! -f "$INAPP" ]; then INAPP="${{ github.event.inputs.ICON_PATH }}"; fi
          test -f "$INAPP" || { echo "::error ::No Aeronics logo found (INAPP_LOGO/ICON_PATH)"; exit 1; }

          # create our drawable at multiple densities
          mkdir -p work/decoded/res/drawable-{nodpi,hdpi,xhdpi,xxhdpi,xxxhdpi}
          cp "$INAPP"                               work/decoded/res/drawable-nodpi/aero_appicon.png
          convert "$INAPP" -resize 72x72            work/decoded/res/drawable-hdpi/aero_appicon.png
          convert "$INAPP" -resize 96x96            work/decoded/res/drawable-xhdpi/aero_appicon.png
          convert "$INAPP" -resize 144x144          work/decoded/res/drawable-xxhdpi/aero_appicon.png
          convert "$INAPP" -resize 192x192          work/decoded/res/drawable-xxxhdpi/aero_appicon.png

          echo "Before rewrite (examples):"
          grep -RIn --include='*.xml' -e '@drawable/[^"]*qgc' -e '@drawable/[^"]*qground' -e '@drawable/[^"]*logo' work/decoded/res | sed -n '1,80p' || true

          # point any @drawable/qgc*, @drawable/qground*, @drawable/*logo* to our aero_appicon
          find work/decoded/res -type f -name '*.xml' -print0 | xargs -0 -r \
            sed -i -E 's/@drawable\/([A-Za-z0-9_]*qgc[A-Za-z0-9_]*)/@drawable\/aero_appicon/g;
                        s/@drawable\/([A-Za-z0-9_]*qground[A-Za-z0-9_]*)/@drawable\/aero_appicon/g;
                        s/@drawable\/([A-Za-z0-9_]*logo[A-Za-z0-9_]*)/@drawable\/aero_appicon/g'

          # sometimes menus use @mipmap/qgc_* â€” redirect to our launcher
          find work/decoded/res -type f -name '*.xml' -print0 | xargs -0 -r \
            sed -i -E 's/@mipmap\/(qgc[^"]*|qground[^"]*|logo[^"]*)/@mipmap\/ic_launcher/g'

          echo "After rewrite (should show aero_appicon):"
          grep -RIn --include='*.xml' -e '@drawable/[^"]*aero_appicon' work/decoded/res | sed -n '1,80p' || true

      # ---------- Build + Sign ----------
      - name: Build APK with apktool
        run: |
          set -e
          cd work/decoded
          java -jar /usr/local/lib/apktool.jar b -f -o ../unsigned.apk
          ls -lh ../unsigned.apk

      - name: Sign & align APK (uber-apk-signer)
        run: |
          set -e
          cd work
          wget -q https://github.com/patrickfav/uber-apk-signer/releases/download/v1.3.0/uber-apk-signer-1.3.0.jar -O signer.jar
          java -jar signer.jar --apks unsigned.apk
          echo "Signed APKs found:"
          ls -lh *Signed.apk
          APK_FILE=$(ls *-releaseSigned.apk 2>/dev/null || ls *-debugSigned.apk | head -n1)
          cp "$APK_FILE" Aeronics-GCS.apk
          ls -lh Aeronics-GCS.apk

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: Aeronics-GCS
          path: work/Aeronics-GCS.apk
