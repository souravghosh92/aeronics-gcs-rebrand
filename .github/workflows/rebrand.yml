name: Rebrand Aeronics GCS
on:
  workflow_dispatch:

jobs:
  rebrand:
    runs-on: ubuntu-latest
    env:
      BASE_APK_URL: https://github.com/souravghosh92/aeronics-gcs-rebrand/releases/download/Base.apk/base.apk
      APP_NAME: Aeronics GCS
      ICON_PATH: branding/aeronics_icon_512.png         # 512x512 PNG
      OVERRIDES_DIR: branding/overrides                 # put all in-app logos here

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup tools
        run: |
          set -e
          sudo apt-get update
          sudo apt-get install -y default-jdk imagemagick zipalign curl grep sed
          # apktool
          sudo curl -L -o /usr/local/bin/apktool.jar https://bitbucket.org/iBotPeaches/apktool/downloads/apktool_2.9.3.jar
          echo 'exec java -jar /usr/local/bin/apktool.jar "$@"' | sudo tee /usr/local/bin/apktool >/dev/null
          sudo chmod +x /usr/local/bin/apktool
          # signer
          mkdir -p "$HOME/bin"
          curl -L -o "$HOME/bin/uber-apk-signer.jar" https://github.com/patrickfav/uber-apk-signer/releases/download/v1.3.0/uber-apk-signer-1.3.0.jar
          apktool --version

      - name: Download Base APK
        run: |
          set -e
          mkdir -p work
          cd work
          curl -L "$BASE_APK_URL" -o base.apk
          ls -lh base.apk

      - name: Decode APK
        run: |
          set -e
          cd work
          apktool d -f base.apk -o decoded
          test -d decoded

      - name: Update manifest (app label + extractNativeLibs)
        run: |
          set -e
          cd work/decoded
          if grep -q 'android:label=' AndroidManifest.xml; then
            sed -i 's#android:label="[^"]*"#android:label="'"$APP_NAME"'"#' AndroidManifest.xml
          else
            sed -i 's#<application #<application android:label="'"$APP_NAME"'" #' AndroidManifest.xml
          fi
          if grep -q 'android:extractNativeLibs=' AndroidManifest.xml; then
            sed -i 's#android:extractNativeLibs="[^"]*"#android:extractNativeLibs="true"#' AndroidManifest.xml
          else
            sed -i 's#<application #<application android:extractNativeLibs="true" #' AndroidManifest.xml
          fi

      # -------------------- LAUNCHER (you already see this working) --------------------
      - name: Replace launcher icons (generate our own mipmaps)
        run: |
          set -e
          cd work/decoded
          SRC="$GITHUB_WORKSPACE/$ICON_PATH"
          if [ ! -f "$SRC" ]; then
            echo "::error ::Missing $ICON_PATH (512x512 PNG)"; exit 1
          fi
          for den in mdpi hdpi xhdpi xxhdpi xxxhdpi; do
            mkdir -p "res/mipmap-$den" "res/mipmap-$den-v4"
          done
          convert "$SRC" -resize 48x48   res/mipmap-mdpi/ic_aeronics.png
          convert "$SRC" -resize 72x72   res/mipmap-hdpi/ic_aeronics.png
          convert "$SRC" -resize 96x96   res/mipmap-xhdpi/ic_aeronics.png
          convert "$SRC" -resize 144x144 res/mipmap-xxhdpi/ic_aeronics.png
          convert "$SRC" -resize 192x192 res/mipmap-xxxhdpi/ic_aeronics.png
          for den in mdpi hdpi xhdpi xxhdpi xxxhdpi; do
            [ -d "res/mipmap-$den-v4" ] && cp "res/mipmap-$den/ic_aeronics.png" "res/mipmap-$den-v4/ic_aeronics.png" || true
          done

      - name: Force launcher + roundIcon in manifest
        run: |
          set -e
          cd work/decoded
          if grep -q 'android:icon=' AndroidManifest.xml; then
            sed -i 's#android:icon="[^"]*"#android:icon="@mipmap/ic_aeronics"#' AndroidManifest.xml
          else
            sed -i 's#<application #<application android:icon="@mipmap/ic_aeronics" #' AndroidManifest.xml
          fi
          if grep -q 'android:roundIcon=' AndroidManifest.xml; then
            sed -i 's#android:roundIcon="[^"]*"#android:roundIcon="@mipmap/ic_aeronics"#' AndroidManifest.xml
          else
            sed -i 's#<application #<application android:roundIcon="@mipmap/ic_aeronics" #' AndroidManifest.xml
          fi

      - name: Patch Android 12 splashscreen icon
        run: |
          set -e
          cd work/decoded
          if [ -f res/drawable/splashscreen.xml ]; then
            sed -i 's#@mipmap/[^"]*#@mipmap/ic_aeronics#g; s#@drawable/[^"]*#@mipmap/ic_aeronics#g' res/drawable/splashscreen.xml
          fi

      # -------------------- IN-APP BRAND IMAGES --------------------
      - name: List likely in-app logo files (for your reference in logs)
        run: |
          set -e
          cd work/decoded
          {
            echo "=== RES (drawables, anydpi, etc.) ==="
            find res -type f -iregex '.*\(logo\|qgc\|toolbar\|splash\).*\.png' -print
            echo
            echo "=== ASSETS (Qt/QML packaged images) ==="
            find assets -type f -iregex '.*\(logo\|qgc\|toolbar\|splash\).*\.png' -print
          } | tee "$GITHUB_WORKSPACE/found-images.txt"

      - name: Upload list of found images (optional)
        uses: actions/upload-artifact@v4
        with:
          name: found-images
          path: found-images.txt

      - name: Apply overrides by filename anywhere in APK (with auto-resize)
        run: |
          set -e
          cd work/decoded
          OV="$GITHUB_WORKSPACE/$OVERRIDES_DIR"
          if [ ! -d "$OV" ]; then
            echo "::warning ::No overrides directory $OV"; exit 0
          fi
          # For each override file, find all matches by the same filename and replace
          replaced_any=0
          while IFS= read -r -d '' src; do
            base="$(basename "$src")"
            # find all occurrences of this filename in decoded tree
            mapfile -t dests < <(find . -type f -name "$base" -print)
            if [ "${#dests[@]}" -eq 0 ]; then
              echo "::warning ::No destination found for $base (skip)"
              continue
            fi
            for dst in "${dests[@]}"; do
              # match source image size to destination size
              # (fallback 256x256 if identify fails)
              sz=$(identify -format "%wx%h" "$dst" 2>/dev/null || echo 256x256)
              echo "Replacing $dst with $base (resize -> $sz)"
              convert "$src" -resize "$sz" "$dst"
              replaced_any=1
            done
          done < <(find "$OV" -type f -name "*.png" -print0)

          if [ "$replaced_any" = 0 ]; then
            echo "::warning ::No in-app images replaced (check filenames in $OVERRIDES_DIR match those in found-images.txt)"
          fi

      - name: Build APK
        run: |
          set -e
          cd work/decoded
          apktool b -f -o ../unsigned.apk
          ls -lh ../unsigned.apk

      - name: Sign & Align
        run: |
          set -e
          cd work
          java -jar "$HOME/bin/uber-apk-signer.jar" --apks unsigned.apk --out .
          out_apk=$(ls *-aligned-*-signed.apk | head -n 1 || true)
          [ -z "$out_apk" ] && out_apk=$(ls *-aligned-*.apk | head -n 1 || true)
          [ -z "$out_apk" ] && { echo "::error ::Signing failed (no output APK)"; exit 1; }
          mv "$out_apk" Aeronics-GCS.apk
          ls -lh Aeronics-GCS.apk

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: Aeronics-GCS.apk
          path: work/Aeronics-GCS.apk
